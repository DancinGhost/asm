main:     file format elf32-littlearm


Disassembly of section .init:

<_init>:
        push    {r3, lr}
        bl      <call_weak_fn>
        pop     {r3, pc}

Disassembly of section .plt:

<.plt>:
        push    {lr}            ; (str lr, [sp, #-4]!)
        ldr     lr, [pc, #4]    ; <.plt+0x10>
        add     lr, pc, lr
        ldr     pc, [lr, #8]!
        .word   0x000116a8

<__aeabi_atexit@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1704]!        ; 0x6a8

<__cxa_begin_catch@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1696]!        ; 0x6a0

<pthread_join@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1688]!        ; 0x698

<__cxa_allocate_exception@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1680]!        ; 0x690

<printf@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1672]!        ; 0x688

<puts@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1664]!        ; 0x680

<_ZNSirsERi@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1656]!        ; 0x678

<_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1648]!        ; 0x670

<_ZNSolsEPKv@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1640]!        ; 0x668

<abort@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1632]!        ; 0x660

<_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1624]!        ; 0x658

<_ZNSaIcED1Ev@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1616]!        ; 0x650

<__cxa_end_cleanup@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1608]!        ; 0x648

<__isoc99_scanf@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1600]!        ; 0x640

<_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1592]!        ; 0x638

<_ZNSt8ios_base4InitC1Ev@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1584]!        ; 0x630

<__cxa_end_catch@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1576]!        ; 0x628

<__gxx_personality_v0@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1568]!        ; 0x620

<pthread_create@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1560]!        ; 0x618

<__cxa_throw@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1552]!        ; 0x610

<_ZNSolsEi@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1544]!        ; 0x608

<_ZNSaIcEC1Ev@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1536]!        ; 0x600

<__libc_start_main@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1528]!        ; 0x5f8

<__gmon_start__@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1520]!        ; 0x5f0

<__cxa_finalize@plt>:
        add     ip, pc, #0, 12
        add     ip, ip, #69632  ; 0x11000
        ldr     pc, [ip, #1512]!        ; 0x5e8

Disassembly of section .text:

<_start>:
        mov.w   fp, #0
        mov.w   lr, #0
        pop     {r1}
        mov     r2, sp
        push    {r2}
        push    {r0}
        ldr.w   sl, [pc, #36]   ; <_start+0x38>
        add     r3, pc, #32     ; (adr r3, <_start+0x38>)
        add     sl, r3
        ldr.w   ip, [pc, #32]   ; <_start+0x3c>
        ldr.w   ip, [sl, ip]
        str.w   ip, [sp, #-4]!
        ldr     r3, [pc, #24]   ; (<_start+0x40>)
        ldr.w   r3, [sl, r3]
        ldr     r0, [pc, #24]   ; (<_start+0x44>)
        ldr.w   r0, [sl, r0]
        blx     <__libc_start_main@plt>
        blx     <abort@plt>
        .word   0x00011540
        .word   0x00000088
        .word   0x00000080
        .word   0x00000074

<call_weak_fn>:
        ldr     r3, [pc, #20]   ; <call_weak_fn+0x1c>
        ldr     r2, [pc, #20]   ; <call_weak_fn+0x20>
        add     r3, pc, r3
        ldr     r2, [r3, r2]
        cmp     r2, #0
        bxeq    lr
        b       <__gmon_start__@plt>
        .word   0x00011520
        .word   0x00000090

<deregister_tm_clones>:
            ldr r0, [pc, #24]   ; (<deregister_tm_clones+0x1c>)
            ldr r3, [pc, #28]   ; (<deregister_tm_clones+0x20>)
            ldr r2, [pc, #28]   ; (<deregister_tm_clones+0x24>)
            add r0, pc
            add r3, pc
            add r2, pc
            cmp r3, r0
        /-- beq.n       <deregister_tm_clones+0x18>
        |   ldr r3, [pc, #20]   ; (<deregister_tm_clones+0x28>)
        |   ldr r3, [r2, r3]
        +-- cbz r3, <deregister_tm_clones+0x18>
        |   bx  r3
        \-> bx  lr
            nop
            .word       0x000115aa
            .word       0x000115a8
            .word       0x000114fe
            .word       0x00000084

<register_tm_clones>:
            ldr r0, [pc, #32]   ; (<register_tm_clones+0x24>)
            ldr r1, [pc, #36]   ; (<register_tm_clones+0x28>)
            add r0, pc
            ldr r2, [pc, #36]   ; (<register_tm_clones+0x2c>)
            add r1, pc
            subs        r1, r1, r0
            add r2, pc
            lsrs        r3, r1, #31
            add.w       r1, r3, r1, asr #2
            asrs        r1, r1, #1
        /-- beq.n       <register_tm_clones+0x20>
        |   ldr r3, [pc, #20]   ; (<register_tm_clones+0x30>)
        |   ldr r3, [r2, r3]
        +-- cbz r3, <register_tm_clones+0x20>
        |   bx  r3
        \-> bx  lr
            nop
            .word       0x00011580
            .word       0x0001157c
            .word       0x000114d0
            .word       0x00000094

<__do_global_dtors_aux>:
               push     {r3, lr}
               ldr      r3, [pc, #40]   ; (<__do_global_dtors_aux+0x2c>)
               ldr      r2, [pc, #40]   ; (<__do_global_dtors_aux+0x30>)
               add      r3, pc
               add      r2, pc
               ldrb     r3, [r3, #0]
        /----- cbnz     r3, <__do_global_dtors_aux+0x2a>
        |      ldr      r3, [pc, #36]   ; (<__do_global_dtors_aux+0x34>)
        |      ldr      r3, [r2, r3]
        |  /-- cbz      r3, <__do_global_dtors_aux+0x1e>
        |  |   ldr      r3, [pc, #32]   ; (<__do_global_dtors_aux+0x38>)
        |  |   add      r3, pc
        |  |   ldr      r0, [r3, #0]
        |  |   blx      <__cxa_finalize@plt>
        |  \-> bl       <deregister_tm_clones>
        |      ldr      r3, [pc, #24]   ; (<__do_global_dtors_aux+0x3c>)
        |      movs     r2, #1
        |      add      r3, pc
        |      strb     r2, [r3, #0]
        \----> pop      {r3, pc}
               .word    0x0001154a
               .word    0x000114a0
               .word    0x00000098
               .word    0x00011536
               .word    0x0001152a

<frame_dummy>:
        b.n     <register_tm_clones>
        nop

<_Z14multi_functionPv>:
};




void *multi_function(void *arg) { //dummy function setup for pthread
        push    {r7}
        sub     sp, #12
        add     r7, sp, #0
        str     r0, [r7, #4]
    //code
};
        nop
        mov     r0, r3
        adds    r7, #12
        mov     sp, r7
        ldr.w   r7, [sp], #4
        bx      lr

<_Z11my_functionv>:

void my_function() { //dummy function
        push    {r7}
        add     r7, sp, #0
        //code
};
        nop
        mov     sp, r7
        ldr.w   r7, [sp], #4
        bx      lr

<_Z19Function_Parametersii>:

void Function_Parameters(int y, int h){ //dummy function
        push    {r7}
        sub     sp, #12
        add     r7, sp, #0
        str     r0, [r7, #4]
        str     r1, [r7, #0]
    //code
};
        nop
        adds    r7, #12
        mov     sp, r7
        ldr.w   r7, [sp], #4
        bx      lr

<main>:




int main (int argc, char **argv) //main function, this is absolutly nessecary
{ // argc and argv allow comandline options to be passed
                        stmdb   sp!, {r4, r5, r6, r7, r8, lr}
                        sub     sp, #280        ; 0x118
                        add     r7, sp, #0
                        add.w   r3, r7, #280    ; 0x118
                        sub.w   r3, r3, #276    ; 0x114
                        str     r0, [r3, #0]
                        add.w   r3, r7, #280    ; 0x118
                        sub.w   r3, r3, #280    ; 0x118
                        str     r1, [r3, #0]
                        ldr.w   r4, [pc, #1568] ; <main+0x63e>
                        add     r4, pc

//creating an object
name_of_class name_of_object;
                        add.w   r3, r7, #184    ; 0xb8
                        mov     r0, r3
                        bl      <_ZN13name_of_classC1Ev>

//calling a method
name_of_object.member_function;

//calling functions
my_function();
                        bl      <_Z11my_functionv>

//calling a function with parameters
Function_Parameters(1,2);
                        movs    r1, #2
                        movs    r0, #1
                        bl      <_Z19Function_Parametersii>

//calling member functions
name_of_class::member_function();
                        bl      <_ZN13name_of_class15member_functionEv>
//calling int main(); can cause a memory leak!


//varaibles and data types
//dont use letters like me
int x = 50; //interger
                        movs    r3, #50 ; 0x32
                        str.w   r3, [r7, #180]  ; 0xb4
double q = 4.6; //float
                        addw    r3, pc, #1520   ; 0x5f0
                        ldrd    r2, r3, [r3]
                        strd    r2, r3, [r7, #256]      ; 0x100
float b = 1.1; //float
                        movw    r3, #52429      ; 0xcccd
                        movt    r3, #16268      ; 0x3f8c
                        str.w   r3, [r7, #252]  ; 0xfc
bool sky_is_blue = true; //true or false
                        movs    r3, #1
                        strb.w  r3, [r7, #251]  ; 0xfb
char d = 'F'; //character
                        movs    r3, #70 ; 0x46
                        strb.w  r3, [r7, #250]  ; 0xfa
std::string intro = "hello world"; //string
                        add.w   r3, r7, #196    ; 0xc4
                        mov     r0, r3
                        blx     <_ZNSaIcEC1Ev@plt>
                        add.w   r2, r7, #196    ; 0xc4
                        add.w   r3, r7, #156    ; 0x9c
                        ldr.w   r1, [pc, #1480] ; <main+0x642>
                        add     r1, pc
                        mov     r0, r3
                        blx     <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>
                        add.w   r3, r7, #196    ; 0xc4
                        mov     r0, r3
                        blx     <_ZNSaIcED1Ev@plt>
std::string cars[4] = {"Volvo", "BMW", "Ford", "Mazda"}; //array
                        add.w   r6, r7, #60     ; 0x3c
                        movs    r5, #3
                        add.w   r3, r7, #200    ; 0xc8
                        mov     r0, r3
                        blx     <_ZNSaIcEC1Ev@plt>
                        add.w   r3, r7, #200    ; 0xc8
                        mov     r2, r3
                        ldr.w   r3, [pc, #1440] ; <main+0x646>
                        add     r3, pc
                        mov     r1, r3
                        mov     r0, r6
                        blx     <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                        add.w   r3, r7, #200    ; 0xc8
                        mov     r0, r3
                        blx     <_ZNSaIcED1Ev@plt>
                        add.w   r8, r6, #24
                        subs    r5, #1
                        add.w   r3, r7, #204    ; 0xcc
                        mov     r0, r3
                        blx     <_ZNSaIcEC1Ev@plt>
                        add.w   r3, r7, #204    ; 0xcc
                        mov     r2, r3
                        ldr.w   r3, [pc, #1396] ; <main+0x64a>
                        add     r3, pc
                        mov     r1, r3
                        mov     r0, r8
                        blx     <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>
                        add.w   r3, r7, #204    ; 0xcc
                        mov     r0, r3
                        blx     <_ZNSaIcED1Ev@plt>
                        add.w   r8, r8, #24
                        subs    r5, #1
                        add.w   r3, r7, #208    ; 0xd0
                        mov     r0, r3
                        blx     <_ZNSaIcEC1Ev@plt>
                        add.w   r3, r7, #208    ; 0xd0
                        mov     r2, r3
                        ldr.w   r3, [pc, #1356] ; <main+0x64e>
                        add     r3, pc
                        mov     r1, r3
                        mov     r0, r8
                        blx     <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>
                        add.w   r3, r7, #208    ; 0xd0
                        mov     r0, r3
                        blx     <_ZNSaIcED1Ev@plt>
                        add.w   r8, r8, #24
                        subs    r5, #1
                        add.w   r3, r7, #212    ; 0xd4
                        mov     r0, r3
                        blx     <_ZNSaIcEC1Ev@plt>
                        add.w   r3, r7, #212    ; 0xd4
                        mov     r2, r3
                        ldr.w   r3, [pc, #1312] ; <main+0x652>
                        add     r3, pc
                        mov     r1, r3
                        mov     r0, r8
                        blx     <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>
                        add.w   r3, r7, #212    ; 0xd4
                        mov     r0, r3
                        blx     <_ZNSaIcED1Ev@plt>
auto n = 36;
                        movs    r3, #36 ; 0x24
                        str.w   r3, [r7, #244]  ; 0xf4
volatile int y; //
const int v = 100; //constant
                        movs    r3, #100        ; 0x64
                        str.w   r3, [r7, #240]  ; 0xf0
unsigned int o; //cant be negative
signed r;
long i;

//increment operator
++x; //not the same
                        ldr.w   r3, [r7, #180]  ; 0xb4
                        adds    r3, #1
                        str.w   r3, [r7, #180]  ; 0xb4
x++;
                        ldr.w   r3, [r7, #180]  ; 0xb4
                        adds    r3, #1
                        str.w   r3, [r7, #180]  ; 0xb4
//deincrement operator
--x;
                        ldr.w   r3, [r7, #180]  ; 0xb4
                        subs    r3, #1
                        str.w   r3, [r7, #180]  ; 0xb4
x--;
                        ldr.w   r3, [r7, #180]  ; 0xb4
                        subs    r3, #1
                        str.w   r3, [r7, #180]  ; 0xb4

//sizeoff operator
x = sizeof (char); //returns the size in bytes 
                        movs    r3, #1
                        str.w   r3, [r7, #180]  ; 0xb4
!false;  // evaluates to true 

volatile int g; //stop compiler optimization

//logical NOT Operator
!g;
                        ldr     r3, [r7, #52]   ; 0x34

//bitwise NOT Operator
~g;
                        ldr     r3, [r7, #52]   ; 0x34

//bitwise shift Operator
g >> 1;
                        ldr     r3, [r7, #52]   ; 0x34
g << 1;
                        ldr     r3, [r7, #52]   ; 0x34

//bitwise AND Operator
g & 10;
                        ldr     r3, [r7, #52]   ; 0x34

//bitwise XOR Operator
g ^ 10;
                        ldr     r3, [r7, #52]   ; 0x34

//bitwise OR Operator
g | 10;
                        ldr     r3, [r7, #52]   ; 0x34
//(6 >= 6)     evaluates to true
//(5 < 5)      evaluates to false 


//print stuff
std::cout << "Hello world\n";
                        ldr.w   r3, [pc, #1220] ; <main+0x656>
                        add     r3, pc
                        mov     r1, r3
                        ldr.w   r3, [pc, #1216] ; <main+0x65a>
                        ldr     r3, [r4, r3]
                        mov     r0, r3
                        blx     <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
printf ("Hello world\n");
                        ldr.w   r3, [pc, #1208] ; <main+0x65e>
                        add     r3, pc
                        mov     r0, r3
                        blx     <puts@plt>
// "\n" makes a new line


//printing varables
printf ("%d", x); //%d is for an integer but %f would be for float or %s would be for a string
                        ldr.w   r3, [r7, #180]  ; 0xb4
                        mov     r1, r3
                        ldr.w   r3, [pc, #1196] ; <main+0x662>
                        add     r3, pc
                        mov     r0, r3
                        blx     <printf@plt>
std::cout << x; // a simpler way
                        ldr.w   r3, [r7, #180]  ; 0xb4
                        mov     r1, r3
                        ldr.w   r3, [pc, #1168] ; <main+0x65a>
                        ldr     r3, [r4, r3]
                        mov     r0, r3
                        blx     <_ZNSolsEi@plt>


//starting a new line
std::cout << "\n";
                        ldr.w   r3, [pc, #1168] ; <main+0x666>
                        add     r3, pc
                        mov     r1, r3
                        ldr.w   r3, [pc, #1148] ; <main+0x65a>
                        ldr     r3, [r4, r3]
                        mov     r0, r3
                        blx     <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>


//input
std::cout << "input any text: ";
                        ldr.w   r3, [pc, #1152] ; <main+0x66a>
                        add     r3, pc
                        mov     r1, r3
                        ldr.w   r3, [pc, #1128] ; <main+0x65a>
                        ldr     r3, [r4, r3]
                        mov     r0, r3
                        blx     <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
scanf ("%d", &x); //both take the input of x 
                        add.w   r3, r7, #180    ; 0xb4
                        mov     r1, r3
                        ldr.w   r3, [pc, #1132] ; <main+0x66e>
                        add     r3, pc
                        mov     r0, r3
                        blx     <__isoc99_scanf@plt>
std::cin >> x;
                        add.w   r3, r7, #180    ; 0xb4
                        mov     r1, r3
                        ldr.w   r3, [pc, #1116] ; <main+0x672>
                        ldr     r3, [r4, r3]
                        mov     r0, r3
                        blx     <_ZNSirsERi@plt>


//conditionals

if (g == 10)
                        ldr     r3, [r7, #52]   ; 0x34
                        cmp     r3, #10
                        ite     eq
                        moveq   r3, #1
                        movne   r3, #0
                        uxtb    r3, r3
                        cmp     r3, #0
                    /-- bne.n   <main+0x232>
{
        //do stuff
}
else if (g == 20)
                    |   ldr     r3, [r7, #52]   ; 0x34
                    |   cmp     r3, #20
        //more stuff
}


//extremely powerful
switch(x) {
                    \-> ldr.w   r3, [r7, #180]  ; 0xb4
                        cmp     r3, #45 ; 0x2d
                    /-- bgt.n   <main+0x2ca>
                    |   cmp     r3, #15
                 /--|-- blt.n   <main+0x304>
                 |  |   subs    r3, #15
                 |  |   cmp     r3, #30
                 +--|-- bhi.n   <main+0x304>
                 |  |   add     r2, pc, #8      ; (adr r2, <main+0x24e>)
                 |  |   ldr.w   r3, [r2, r3, lsl #2]
                 |  |   add     r2, r3
                 |  |   bx      r2
                 |  |   .word   0x00000083
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x0000008d
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x00000097
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000b7
                 |  |   .word   0x000000a1
                 |  \-> cmp     r3, #64 ; 0x40
                 |  /-- beq.n   <main+0x2f8>
                 +--|-- b.n     <main+0x304>
        case 15:
                printf ("the value of x is 15");
                 |  |   ldr     r3, [pc, #932]  ; (<main+0x676>)
                 |  |   add     r3, pc
                 |  |   mov     r0, r3
                 |  |   blx     <printf@plt>
        case 20:
                printf ("the value of x is 20");
                 |  |   ldr     r3, [pc, #924]  ; (<main+0x67a>)
                 |  |   add     r3, pc
                 |  |   mov     r0, r3
                 |  |   blx     <printf@plt>
        case 35:
                printf ("the value of x is 35");
                 |  |   ldr     r3, [pc, #920]  ; (<main+0x67e>)
                 |  |   add     r3, pc
                 |  |   mov     r0, r3
                 |  |   blx     <printf@plt>
        case 45:
                printf ("the value of x is 45");
                 |  |   ldr     r3, [pc, #912]  ; (<main+0x682>)
                 |  |   add     r3, pc
                 |  |   mov     r0, r3
                 |  |   blx     <printf@plt>
        case 64:
                printf ("the value of x is 64");
                 |  \-> ldr     r3, [pc, #908]  ; (<main+0x686>)
                 |      add     r3, pc
                 |      mov     r0, r3
                 |      blx     <printf@plt>

    //break out of somthing
    break;
                 |      nop
//Conditional ternary operator
7==5+2 ? 4 : 3;


//Conditional loops
int j = 0;
                 \----> movs    r3, #0
                        str.w   r3, [r7, #276]  ; 0x114
//while loop
while (j<50){ //repeat until condition is met
                 /----> ldr.w   r3, [r7, #276]  ; 0x114
                 |      cmp     r3, #49 ; 0x31
                 |  /-- bgt.n   <main+0x31e>
        //code
j++;
                 |  |   ldr.w   r3, [r7, #276]  ; 0x114
                 |  |   adds    r3, #1
                 |  |   str.w   r3, [r7, #276]  ; 0x114
while (j<50){ //repeat until condition is met
                 \--|-- b.n     <main+0x30a>
}


//for loop
for (int i = 0; i < 5; i++) {
                    \-> movs    r3, #0
                        str.w   r3, [r7, #272]  ; 0x110
                 /----> ldr.w   r3, [r7, #272]  ; 0x110
                 |      cmp     r3, #4
                 |  /-- bgt.n   <main+0x354>
        std::cout << i << "\n";
                 |  |   ldr.w   r1, [r7, #272]  ; 0x110
                 |  |   ldr     r3, [pc, #808]  ; (<main+0x65a>)
                 |  |   ldr     r3, [r4, r3]
                 |  |   mov     r0, r3
                 |  |   blx     <_ZNSolsEi@plt>
                 |  |   mov     r2, r0
                 |  |   ldr     r3, [pc, #844]  ; (<main+0x68a>)
                 |  |   add     r3, pc
                 |  |   mov     r1, r3
                 |  |   mov     r0, r2
                 |  |   blx     <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
for (int i = 0; i < 5; i++) {
                 |  |   ldr.w   r3, [r7, #272]  ; 0x110
                 |  |   adds    r3, #1
                 |  |   str.w   r3, [r7, #272]  ; 0x110
                 \--|-- b.n     <main+0x324>
}


//do while loop
int z = 0;
                    \-> movs    r3, #0
                        str.w   r3, [r7, #268]  ; 0x10c
do {
  cout << z << "\n";
                 /----> ldr.w   r1, [r7, #268]  ; 0x10c
                 |      ldr     r3, [pc, #760]  ; (<main+0x65a>)
                 |      ldr     r3, [r4, r3]
                 |      mov     r0, r3
                 |      blx     <_ZNSolsEi@plt>
                 |      mov     r2, r0
                 |      ldr     r3, [pc, #800]  ; (<main+0x68e>)
                 |      add     r3, pc
                 |      mov     r1, r3
                 |      mov     r0, r2
                 |      blx     <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  z++;
                 |      ldr.w   r3, [r7, #268]  ; 0x10c
                 |      adds    r3, #1
                 |      str.w   r3, [r7, #268]  ; 0x10c
}
while (z < 5);
                 |      ldr.w   r3, [r7, #268]  ; 0x10c
                 |      cmp     r3, #4
                 |  /-- bgt.n   <main+0x38a>
do {
                 \--|-- b.n     <main+0x35a>


//continue
for (int m = 0; m < 10; m++) {
                    \-> movs    r3, #0
                        str.w   r3, [r7, #264]  ; 0x108
           /----------> ldr.w   r3, [r7, #264]  ; 0x108
           |            cmp     r3, #9
           |  /-------- bgt.n   <main+0x3cc>
  if (m == 4) {
           |  |         ldr.w   r3, [r7, #264]  ; 0x108
           |  |         cmp     r3, #4
           |  |  /----- beq.n   <main+0x3be>
    continue; //skips if m equials 4
  }
  cout << m << "\n";
           |  |  |      ldr.w   r1, [r7, #264]  ; 0x108
           |  |  |      ldr     r3, [pc, #692]  ; (<main+0x65a>)
           |  |  |      ldr     r3, [r4, r3]
           |  |  |      mov     r0, r3
           |  |  |      blx     <_ZNSolsEi@plt>
           |  |  |      mov     r2, r0
           |  |  |      ldr     r3, [pc, #736]  ; (<main+0x692>)
           |  |  |      add     r3, pc
           |  |  |      mov     r1, r3
           |  |  |      mov     r0, r2
           |  |  |      blx     <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
           |  |  |  /-- b.n     <main+0x3c0>
    continue; //skips if m equials 4
           |  |  \--|-> nop
for (int m = 0; m < 10; m++) {
           |  |     \-> ldr.w   r3, [r7, #264]  ; 0x108
           |  |         adds    r3, #1
           |  |         str.w   r3, [r7, #264]  ; 0x108
           \--|-------- b.n     <main+0x390>
}


//goto
goto label;
              \-------> nop



//address operator
//"&" is put before a varabale or funtion to get the memeory address, example:
printf ("%d", &x); //this prints the memory address of x, like: 0x401720
                        add.w   r3, r7, #180    ; 0xb4
                        mov     r1, r3
                        ldr     r3, [pc, #704]  ; (<main+0x696>)
                        add     r3, pc
                        mov     r0, r3
                        blx     <printf@plt>


//pointers
int* p = &x; //the p varable now holds the memory address of p
                        add.w   r3, r7, #180    ; 0xb4
                        str.w   r3, [r7, #236]  ; 0xec
std::cout << p; //prints the memory address of p
                        ldr.w   r1, [r7, #236]  ; 0xec
                        ldr     r3, [pc, #620]  ; (<main+0x65a>)
                        ldr     r3, [r4, r3]
                        mov     r0, r3
                        blx     <_ZNSolsEPKv@plt>
//void pointer

void* void_pointer;

//NULL pointer
int* null_pointer = NULL;
                        movs    r3, #0
                        str.w   r3, [r7, #232]  ; 0xe8

//references
std::string food = "Pizza";  // food variable
                        add.w   r3, r7, #216    ; 0xd8
                        mov     r0, r3
                        blx     <_ZNSaIcEC1Ev@plt>
                        add.w   r2, r7, #216    ; 0xd8
                        add.w   r3, r7, #28
                        ldr     r1, [pc, #652]  ; (<main+0x69a>)
                        add     r1, pc
                        mov     r0, r3
                        blx     <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>
                        add.w   r3, r7, #216    ; 0xd8
                        mov     r0, r3
                        blx     <_ZNSaIcED1Ev@plt>
std::string &meal = food;    // reference to food
                        add.w   r3, r7, #28
                        str.w   r3, [r7, #228]  ; 0xe4

//dereferencing pointers
std::cout << *p; //instead of printing the memory address of p, this prints the value of p (25)
                        ldr.w   r3, [r7, #236]  ; 0xec
                        ldr     r3, [r3, #0]
                        mov     r1, r3
                        ldr     r3, [pc, #552]  ; (<main+0x65a>)
                        ldr     r3, [r4, r3]
                        mov     r0, r3
                        blx     <_ZNSolsEi@plt>


std::cout << "\n";
                        ldr     r3, [pc, #608]  ; (<main+0x69e>)
                        add     r3, pc
                        mov     r1, r3
                        ldr     r3, [pc, #536]  ; (<main+0x65a>)
                        ldr     r3, [r4, r3]
                        mov     r0, r3
                        blx     <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>


//exceptions

try { // Block of code to try
  int age = 15;
                        movs    r3, #15
                        str.w   r3, [r7, #224]  ; 0xe0
  if (age >= 18) {
                        ldr.w   r3, [r7, #224]  ; 0xe0
                        cmp     r3, #17
                    /-- ble.n   <main+0x46a>
    std::cout << "Access granted - you are old enough.\n";
                    |   ldr     r3, [pc, #584]  ; (<main+0x6a2>)
                    |   add     r3, pc
                    |   mov     r1, r3
                    |   ldr     r3, [pc, #504]  ; (<main+0x65a>)
                    |   ldr     r3, [r4, r3]
                    |   mov     r0, r3
                    |   blx     <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
        /-----------|-- b.n     <main+0x486>
  } else {
    throw 505; // Throw an exception when a problem arise
        |           \-> movs    r0, #4
        |               blx     <__cxa_allocate_exception@plt>
        |               mov     r3, r0
        |               mov     r0, r3
        |               movw    r3, #505        ; 0x1f9
        |               str     r3, [r0, #0]
        |               movs    r2, #0
        |               ldr     r3, [pc, #552]  ; (<main+0x6a6>)
        |               ldr     r3, [r4, r3]
        |               mov     r1, r3
        |               blx     <__cxa_throw@plt>

//multi-threading in C

pthread_t t1, t2, t3, t4; //Create 4 threads

pthread_create(&t1, NULL, multi_function, NULL); //starting threads
        >-------------> add.w   r0, r7, #24
        |               movs    r3, #0
        |               ldr     r2, [pc, #540]  ; (<main+0x6aa>)
        |               add     r2, pc
        |               movs    r1, #0
        |               blx     <pthread_create@plt>
pthread_create(&t2, NULL, multi_function, NULL);
        |               add.w   r0, r7, #20
        |               movs    r3, #0
        |               ldr     r2, [pc, #528]  ; (<main+0x6ae>)
        |               add     r2, pc
        |               movs    r1, #0
        |               blx     <pthread_create@plt>
pthread_create(&t3, NULL, multi_function, NULL);
        |               add.w   r0, r7, #16
        |               movs    r3, #0
        |               ldr     r2, [pc, #516]  ; (<main+0x6b2>)
        |               add     r2, pc
        |               movs    r1, #0
        |               blx     <pthread_create@plt>
pthread_create(&t4, NULL, multi_function, NULL);
        |               add.w   r0, r7, #12
        |               movs    r3, #0
        |               ldr     r2, [pc, #504]  ; (<main+0x6b6>)
        |               add     r2, pc
        |               movs    r1, #0
        |               blx     <pthread_create@plt>

pthread_join(t1, NULL); //Closing the threads back to main thread
        |               add.w   r3, r7, #280    ; 0x118
        |               sub.w   r3, r3, #256    ; 0x100
        |               ldr     r3, [r3, #0]
        |               movs    r1, #0
        |               mov     r0, r3
        |               blx     <pthread_join@plt>
pthread_join(t2, NULL);
        |               add.w   r3, r7, #280    ; 0x118
        |               sub.w   r3, r3, #260    ; 0x104
        |               ldr     r3, [r3, #0]
        |               movs    r1, #0
        |               mov     r0, r3
        |               blx     <pthread_join@plt>
pthread_join(t3, NULL);
        |               add.w   r3, r7, #280    ; 0x118
        |               sub.w   r3, r3, #264    ; 0x108
        |               ldr     r3, [r3, #0]
        |               movs    r1, #0
        |               mov     r0, r3
        |               blx     <pthread_join@plt>
pthread_join(t4, NULL);
        |               add.w   r3, r7, #280    ; 0x118
        |               sub.w   r3, r3, #268    ; 0x10c
        |               ldr     r3, [r3, #0]
        |               movs    r1, #0
        |               mov     r0, r3
        |               blx     <pthread_join@plt>
//core1.join(); //Closing the threads back to main thread
//core2.join();
//core3.join();
//core4.join(); //doesnt have to be core, it can be whatever you want to call it

return 0; //important because int main has a integer return type
        |               movs    r5, #0
std::string food = "Pizza";  // food variable
        |               add.w   r3, r7, #28
        |               mov     r0, r3
        |               blx     <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
std::string cars[4] = {"Volvo", "BMW", "Ford", "Mazda"}; //array
        |               add.w   r4, r7, #60     ; 0x3c
        |               adds    r4, #96 ; 0x60
        |        /----> add.w   r3, r7, #60     ; 0x3c
        |        |      cmp     r4, r3
        |        |  /-- beq.n   <main+0x532>
        |        |  |   subs    r4, #24
        |        |  |   mov     r0, r4
        |        |  |   blx     <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
        |        \--|-- b.n     <main+0x520>
std::string intro = "hello world"; //string
        |           \-> add.w   r3, r7, #156    ; 0x9c
        |               mov     r0, r3
        |               blx     <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
        |               mov     r3, r5
        |  /----------- b.n     <main+0x62a>
        |  |            add.w   r3, r7, #196    ; 0xc4
        |  |            mov     r0, r3
        |  |            blx     <_ZNSaIcED1Ev@plt>
        |  |            blx     <__cxa_end_cleanup@plt>
        |  |            add.w   r3, r7, #200    ; 0xc8
        |  |            mov     r0, r3
        |  |            blx     <_ZNSaIcED1Ev@plt>
        |  |        /-- b.n     <main+0x57c>
        |  |        |   add.w   r3, r7, #204    ; 0xcc
        |  |        |   mov     r0, r3
        |  |        |   blx     <_ZNSaIcED1Ev@plt>
        |  |        +-- b.n     <main+0x57c>
        |  |        |   add.w   r3, r7, #208    ; 0xd0
        |  |        |   mov     r0, r3
        |  |        |   blx     <_ZNSaIcED1Ev@plt>
        |  |        +-- b.n     <main+0x57c>
        |  |        |   add.w   r3, r7, #212    ; 0xd4
        |  |        |   mov     r0, r3
        |  |        |   blx     <_ZNSaIcED1Ev@plt>
        |  |        \-> cmp     r6, #0
        |  |  /-------- beq.n   <main+0x61c>
std::string cars[4] = {"Volvo", "BMW", "Ford", "Mazda"}; //array
        |  |  |         rsb     r3, r5, #3
        |  |  |         mov     r2, r3
        |  |  |         movs    r3, #24
        |  |  |         mul.w   r3, r2, r3
        |  |  |         adds    r4, r6, r3
        |  |  |     /-> cmp     r4, r6
        |  |  +-----|-- beq.n   <main+0x61c>
        |  |  |     |   subs    r4, #24
        |  |  |     |   mov     r0, r4
        |  |  |     |   blx     <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
        |  |  |     \-- b.n     <main+0x58e>
        |  |  |         add.w   r3, r7, #216    ; 0xd8
        |  |  |         mov     r0, r3
        |  |  |         blx     <_ZNSaIcED1Ev@plt>
        |  |  |  /----- b.n     <main+0x604>
catch (int myNum) { // Block of code to handle errors 
        |  |  |  |      mov     r2, r0
        |  |  |  |      mov     r3, r1
        |  |  |  |      cmp     r3, #1
        |  |  |  |  /-- bne.n   <main+0x5f8>
        |  |  |  |  |   mov     r3, r2
        |  |  |  |  |   mov     r0, r3
        |  |  |  |  |   blx     <__cxa_begin_catch@plt>
        |  |  |  |  |   mov     r3, r0
        |  |  |  |  |   ldr     r3, [r3, #0]
        |  |  |  |  |   str.w   r3, [r7, #220]  ; 0xdc
  std::cout << "Access denied - You must be at least 18 years old.\n";
        |  |  |  |  |   ldr     r3, [pc, #248]  ; (<main+0x6ba>)
        |  |  |  |  |   add     r3, pc
        |  |  |  |  |   mov     r1, r3
        |  |  |  |  |   ldr     r3, [pc, #144]  ; (<main+0x65a>)
        |  |  |  |  |   ldr     r3, [r4, r3]
        |  |  |  |  |   mov     r0, r3
        |  |  |  |  |   blx     <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  std::cout << "Error number: " << myNum;
        |  |  |  |  |   ldr     r3, [pc, #236]  ; (<main+0x6be>)
        |  |  |  |  |   add     r3, pc
        |  |  |  |  |   mov     r1, r3
        |  |  |  |  |   ldr     r3, [pc, #128]  ; (<main+0x65a>)
        |  |  |  |  |   ldr     r3, [r4, r3]
        |  |  |  |  |   mov     r0, r3
        |  |  |  |  |   blx     <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
        |  |  |  |  |   mov     r3, r0
        |  |  |  |  |   ldr.w   r1, [r7, #220]  ; 0xdc
        |  |  |  |  |   mov     r0, r3
        |  |  |  |  |   blx     <_ZNSolsEi@plt>
catch (int myNum) { // Block of code to handle errors 
        |  |  |  |  |   blx     <__cxa_end_catch@plt>
        \--|--|--|--|-- b.n     <main+0x486>
           |  |  |  |   blx     <__cxa_end_catch@plt>
           |  |  |  +-- b.n     <main+0x5f8>
std::string food = "Pizza";  // food variable
           |  |  |  \-> add.w   r3, r7, #28
           |  |  |      mov     r0, r3
           |  |  |      blx     <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
           |  |  +----- b.n     <main+0x604>
std::string cars[4] = {"Volvo", "BMW", "Ford", "Mazda"}; //array
           |  |  \----> add.w   r4, r7, #60     ; 0x3c
           |  |         adds    r4, #96 ; 0x60
           |  |     /-> add.w   r3, r7, #60     ; 0x3c
           |  |     |   cmp     r4, r3
           |  +-----|-- beq.n   <main+0x61c>
           |  |     |   subs    r4, #24
           |  |     |   mov     r0, r4
           |  |     |   blx     <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
           |  |     \-- b.n     <main+0x60a>
std::string intro = "hello world"; //string
           |  \-------> add.w   r3, r7, #156    ; 0x9c
           |            mov     r0, r3
           |            blx     <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
           |            blx     <__cxa_end_cleanup@plt>
           \----------> mov     r0, r3
                        add.w   r7, r7, #280    ; 0x118
                        mov     sp, r7
                        ldmia.w sp!, {r4, r5, r6, r7, r8, pc}
                        .word   0x66666666
                        .word   0x40126666
                        .word   0x0001140a
                        .word   0x000007f6
                        .word   0x000007d6
                        .word   0x000007b0
                        .word   0x00000786
                        .word   0x00000760
                        .word   0x00000708
                        .word   0x0000007c
                        .word   0x00000704
                        .word   0x000006fe
                        .word   0x000006e4
                        .word   0x000006d4
                        .word   0x000006b2
                        .word   0x0000008c
                        .word   0x00000600
                        .word   0x0000060e
                        .word   0x0000061c
                        .word   0x0000062a
                        .word   0x00000638
                        .word   0x0000057c
                        .word   0x0000054e
                        .word   0x00000508
                        .word   0x000004e0
                        .word   0x0000053c
                        .word   0x0000047e
                        .word   0x000004f8
                        .word   0x00000070
                        .word   0xfffffb35
                        .word   0xfffffb25
                        .word   0xfffffb15
                        .word   0xfffffb05
                        .word   0x000003b8
                        .word   0x000003dc

<_Z41__static_initialization_and_destruction_0ii>:
            push        {r4, r7, lr}
            sub sp, #12
            add r7, sp, #0
            str r0, [r7, #4]
            str r1, [r7, #0]
            ldr r4, [pc, #60]   ; (<_Z41__static_initialization_and_destruction_0ii+0x48>)
            add r4, pc
            ldr r3, [r7, #4]
            cmp r3, #1
        /-- bne.n       <_Z41__static_initialization_and_destruction_0ii+0x3e>
        |   ldr r3, [r7, #0]
        |   movw        r2, #65535      ; 0xffff
        |   cmp r3, r2
        +-- bne.n       <_Z41__static_initialization_and_destruction_0ii+0x3e>
  extern wostream wclog;        /// Linked to standard error (buffered)
#endif
  //@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
        |   ldr r3, [pc, #44]   ; (<_Z41__static_initialization_and_destruction_0ii+0x4c>)
        |   add r3, pc
        |   mov r0, r3
        |   blx <_ZNSt8ios_base4InitC1Ev@plt>
        |   ldr r3, [pc, #36]   ; (<_Z41__static_initialization_and_destruction_0ii+0x50>)
        |   add r3, pc
        |   mov r2, r3
        |   ldr r3, [pc, #36]   ; (<_Z41__static_initialization_and_destruction_0ii+0x54>)
        |   ldr r3, [r4, r3]
        |   mov r1, r3
        |   ldr r3, [pc, #32]   ; (<_Z41__static_initialization_and_destruction_0ii+0x58>)
        |   add r3, pc
        |   mov r0, r3
        |   blx <__aeabi_atexit@plt>
        \-> nop
            adds        r7, #12
            mov sp, r7
            pop {r4, r7, pc}
            nop
            .word       0x00010d5c
            .word       0x00010df4
            .word       0x00010de2
            .word       0x0000009c
            .word       0x00010dde

<_GLOBAL__sub_I__Z14multi_functionPv>:
        push    {r7, lr}
        add     r7, sp, #0
        movw    r1, #65535      ; 0xffff
        movs    r0, #1
        bl      <_Z41__static_initialization_and_destruction_0ii>
        pop     {r7, pc}

<_ZN13name_of_class15member_functionEv>:
static void member_function() { //static member function
        push    {r7}
        add     r7, sp, #0
};
        nop
        mov     sp, r7
        ldr.w   r7, [sp], #4
        bx      lr

<_ZN13name_of_class12my_function2Ev>:
virtual void my_function2() {
        push    {r7}
        sub     sp, #12
        add     r7, sp, #0
        str     r0, [r7, #4]
};
        nop
        adds    r7, #12
        mov     sp, r7
        ldr.w   r7, [sp], #4
        bx      lr
        ...

<_ZN13name_of_classC1Ev>:
class name_of_class {
        push    {r7}
        sub     sp, #12
        add     r7, sp, #0
        str     r0, [r7, #4]
        ldr     r2, [pc, #32]   ; (<_ZN13name_of_classC1Ev+0x2c>)
        add     r2, pc
        ldr     r3, [pc, #32]   ; (<_ZN13name_of_classC1Ev+0x30>)
        ldr     r3, [r2, r3]
        add.w   r2, r3, #8
        ldr     r3, [r7, #4]
        str     r2, [r3, #0]
        ldr     r3, [r7, #4]
        movs    r2, #10
        str     r2, [r3, #8]
        ldr     r3, [r7, #4]
        mov     r0, r3
        adds    r7, #12
        mov     sp, r7
        ldr.w   r7, [sp], #4
        bx      lr
        .word   0x00010cce
        .word   0x00000078

<__libc_csu_init>:
               stmdb    sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
               mov      r7, r0
               ldr      r6, [pc, #48]   ; (<__libc_csu_init+0x38>)
               ldr      r5, [pc, #48]   ; (<__libc_csu_init+0x3c>)
               mov      r8, r1
               add      r6, pc
               mov      r9, r2
               add      r5, pc
               blx      <_init>
               subs     r6, r6, r5
               asrs     r6, r6, #2
        /----- beq.n    <__libc_csu_init+0x32>
        |      subs     r5, #4
        |      movs     r4, #0
        |  /-> ldr.w    r3, [r5, #4]!
        |  |   mov      r2, r9
        |  |   mov      r1, r8
        |  |   mov      r0, r7
        |  |   adds     r4, #1
        |  |   blx      r3
        |  |   cmp      r6, r4
        |  \-- bne.n    <__libc_csu_init+0x20>
        \----> ldmia.w  sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
               nop
               .word    0x00010b80
               .word    0x00010b74

<__libc_csu_fini>:
        bx      lr
        nop

Disassembly of section .fini:

<_fini>:
        push    {r3, lr}
        pop     {r3, pc}
                            
