
main:     file format elf64-x86-64


Disassembly of section .init:

0000000000001000 <_init>:
    1000:           48 83 ec 08                 sub    rsp,0x8
    1004:           48 8b 05 dd 2f 00 00        mov    rax,QWORD PTR [rip+0x2fdd]        # 3fe8 <__gmon_start__>
    100b:           48 85 c0                    test   rax,rax
    100e:       /-- 74 02                       je     1012 <_init+0x12>
    1010:       |   ff d0                       call   rax
    1012:       \-> 48 83 c4 08                 add    rsp,0x8
    1016:           c3                          ret    

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:       ff 35 e2 2f 00 00       push   QWORD PTR [rip+0x2fe2]        # 4008 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:       ff 25 e4 2f 00 00       jmp    QWORD PTR [rip+0x2fe4]        # 4010 <_GLOBAL_OFFSET_TABLE_+0x10>
    102c:       0f 1f 40 00             nop    DWORD PTR [rax+0x0]

0000000000001030 <printf@plt>:
    1030:       ff 25 e2 2f 00 00       jmp    QWORD PTR [rip+0x2fe2]        # 4018 <printf@GLIBC_2.2.5>
    1036:       68 00 00 00 00          push   0x0
    103b:       e9 e0 ff ff ff          jmp    1020 <.plt>

0000000000001040 <__cxa_begin_catch@plt>:
    1040:       ff 25 da 2f 00 00       jmp    QWORD PTR [rip+0x2fda]        # 4020 <__cxa_begin_catch@CXXABI_1.3>
    1046:       68 01 00 00 00          push   0x1
    104b:       e9 d0 ff ff ff          jmp    1020 <.plt>

0000000000001050 <__cxa_allocate_exception@plt>:
    1050:       ff 25 d2 2f 00 00       jmp    QWORD PTR [rip+0x2fd2]        # 4028 <__cxa_allocate_exception@CXXABI_1.3>
    1056:       68 02 00 00 00          push   0x2
    105b:       e9 c0 ff ff ff          jmp    1020 <.plt>

0000000000001060 <pthread_join@plt>:
    1060:       ff 25 ca 2f 00 00       jmp    QWORD PTR [rip+0x2fca]        # 4030 <pthread_join@GLIBC_2.2.5>
    1066:       68 03 00 00 00          push   0x3
    106b:       e9 b0 ff ff ff          jmp    1020 <.plt>

0000000000001070 <pthread_create@plt>:
    1070:       ff 25 c2 2f 00 00       jmp    QWORD PTR [rip+0x2fc2]        # 4038 <pthread_create@GLIBC_2.2.5>
    1076:       68 04 00 00 00          push   0x4
    107b:       e9 a0 ff ff ff          jmp    1020 <.plt>

0000000000001080 <_ZNSirsERi@plt>:
    1080:       ff 25 ba 2f 00 00       jmp    QWORD PTR [rip+0x2fba]        # 4040 <_ZNSirsERi@GLIBCXX_3.4>
    1086:       68 05 00 00 00          push   0x5
    108b:       e9 90 ff ff ff          jmp    1020 <.plt>

0000000000001090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>:
    1090:       ff 25 b2 2f 00 00       jmp    QWORD PTR [rip+0x2fb2]        # 4048 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@GLIBCXX_3.4.21>
    1096:       68 06 00 00 00          push   0x6
    109b:       e9 80 ff ff ff          jmp    1020 <.plt>

00000000000010a0 <_ZNSolsEPKv@plt>:
    10a0:       ff 25 aa 2f 00 00       jmp    QWORD PTR [rip+0x2faa]        # 4050 <_ZNSolsEPKv@GLIBCXX_3.4>
    10a6:       68 07 00 00 00          push   0x7
    10ab:       e9 70 ff ff ff          jmp    1020 <.plt>

00000000000010b0 <__cxa_atexit@plt>:
    10b0:       ff 25 a2 2f 00 00       jmp    QWORD PTR [rip+0x2fa2]        # 4058 <__cxa_atexit@GLIBC_2.2.5>
    10b6:       68 08 00 00 00          push   0x8
    10bb:       e9 60 ff ff ff          jmp    1020 <.plt>

00000000000010c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>:
    10c0:       ff 25 9a 2f 00 00       jmp    QWORD PTR [rip+0x2f9a]        # 4060 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@GLIBCXX_3.4>
    10c6:       68 09 00 00 00          push   0x9
    10cb:       e9 50 ff ff ff          jmp    1020 <.plt>

00000000000010d0 <_ZNSaIcED1Ev@plt>:
    10d0:       ff 25 92 2f 00 00       jmp    QWORD PTR [rip+0x2f92]        # 4068 <_ZNSaIcED1Ev@GLIBCXX_3.4>
    10d6:       68 0a 00 00 00          push   0xa
    10db:       e9 40 ff ff ff          jmp    1020 <.plt>

00000000000010e0 <__isoc99_scanf@plt>:
    10e0:       ff 25 8a 2f 00 00       jmp    QWORD PTR [rip+0x2f8a]        # 4070 <__isoc99_scanf@GLIBC_2.7>
    10e6:       68 0b 00 00 00          push   0xb
    10eb:       e9 30 ff ff ff          jmp    1020 <.plt>

00000000000010f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>:
    10f0:       ff 25 82 2f 00 00       jmp    QWORD PTR [rip+0x2f82]        # 4078 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@GLIBCXX_3.4.21>
    10f6:       68 0c 00 00 00          push   0xc
    10fb:       e9 20 ff ff ff          jmp    1020 <.plt>

0000000000001100 <_ZNSt8ios_base4InitC1Ev@plt>:
    1100:       ff 25 7a 2f 00 00       jmp    QWORD PTR [rip+0x2f7a]        # 4080 <_ZNSt8ios_base4InitC1Ev@GLIBCXX_3.4>
    1106:       68 0d 00 00 00          push   0xd
    110b:       e9 10 ff ff ff          jmp    1020 <.plt>

0000000000001110 <puts@plt>:
    1110:       ff 25 72 2f 00 00       jmp    QWORD PTR [rip+0x2f72]        # 4088 <puts@GLIBC_2.2.5>
    1116:       68 0e 00 00 00          push   0xe
    111b:       e9 00 ff ff ff          jmp    1020 <.plt>

0000000000001120 <__cxa_end_catch@plt>:
    1120:       ff 25 6a 2f 00 00       jmp    QWORD PTR [rip+0x2f6a]        # 4090 <__cxa_end_catch@CXXABI_1.3>
    1126:       68 0f 00 00 00          push   0xf
    112b:       e9 f0 fe ff ff          jmp    1020 <.plt>

0000000000001130 <__cxa_throw@plt>:
    1130:       ff 25 62 2f 00 00       jmp    QWORD PTR [rip+0x2f62]        # 4098 <__cxa_throw@CXXABI_1.3>
    1136:       68 10 00 00 00          push   0x10
    113b:       e9 e0 fe ff ff          jmp    1020 <.plt>

0000000000001140 <_ZNSolsEi@plt>:
    1140:       ff 25 5a 2f 00 00       jmp    QWORD PTR [rip+0x2f5a]        # 40a0 <_ZNSolsEi@GLIBCXX_3.4>
    1146:       68 11 00 00 00          push   0x11
    114b:       e9 d0 fe ff ff          jmp    1020 <.plt>

0000000000001150 <_Unwind_Resume@plt>:
    1150:       ff 25 52 2f 00 00       jmp    QWORD PTR [rip+0x2f52]        # 40a8 <_Unwind_Resume@GCC_3.0>
    1156:       68 12 00 00 00          push   0x12
    115b:       e9 c0 fe ff ff          jmp    1020 <.plt>

0000000000001160 <_ZNSaIcEC1Ev@plt>:
    1160:       ff 25 4a 2f 00 00       jmp    QWORD PTR [rip+0x2f4a]        # 40b0 <_ZNSaIcEC1Ev@GLIBCXX_3.4>
    1166:       68 13 00 00 00          push   0x13
    116b:       e9 b0 fe ff ff          jmp    1020 <.plt>

Disassembly of section .plt.got:

0000000000001170 <__cxa_finalize@plt>:
    1170:       ff 25 5a 2e 00 00       jmp    QWORD PTR [rip+0x2e5a]        # 3fd0 <__cxa_finalize@GLIBC_2.2.5>
    1176:       66 90                   xchg   ax,ax

Disassembly of section .text:

0000000000001180 <_start>:
    1180:       31 ed                   xor    ebp,ebp
    1182:       49 89 d1                mov    r9,rdx
    1185:       5e                      pop    rsi
    1186:       48 89 e2                mov    rdx,rsp
    1189:       48 83 e4 f0             and    rsp,0xfffffffffffffff0
    118d:       50                      push   rax
    118e:       54                      push   rsp
    118f:       4c 8d 05 5a 09 00 00    lea    r8,[rip+0x95a]        # 1af0 <__libc_csu_fini>
    1196:       48 8d 0d f3 08 00 00    lea    rcx,[rip+0x8f3]        # 1a90 <__libc_csu_init>
    119d:       48 8d 3d e0 00 00 00    lea    rdi,[rip+0xe0]        # 1284 <main>
    11a4:       ff 15 36 2e 00 00       call   QWORD PTR [rip+0x2e36]        # 3fe0 <__libc_start_main@GLIBC_2.2.5>
    11aa:       f4                      hlt    
    11ab:       0f 1f 44 00 00          nop    DWORD PTR [rax+rax*1+0x0]

00000000000011b0 <deregister_tm_clones>:
    11b0:           48 8d 3d 21 2f 00 00        lea    rdi,[rip+0x2f21]        # 40d8 <__TMC_END__>
    11b7:           48 8d 05 1a 2f 00 00        lea    rax,[rip+0x2f1a]        # 40d8 <__TMC_END__>
    11be:           48 39 f8                    cmp    rax,rdi
    11c1:       /-- 74 15                       je     11d8 <deregister_tm_clones+0x28>
    11c3:       |   48 8b 05 0e 2e 00 00        mov    rax,QWORD PTR [rip+0x2e0e]        # 3fd8 <_ITM_deregisterTMCloneTable>
    11ca:       |   48 85 c0                    test   rax,rax
    11cd:       +-- 74 09                       je     11d8 <deregister_tm_clones+0x28>
    11cf:       |   ff e0                       jmp    rax
    11d1:       |   0f 1f 80 00 00 00 00        nop    DWORD PTR [rax+0x0]
    11d8:       \-> c3                          ret    
    11d9:           0f 1f 80 00 00 00 00        nop    DWORD PTR [rax+0x0]

00000000000011e0 <register_tm_clones>:
    11e0:           48 8d 3d f1 2e 00 00        lea    rdi,[rip+0x2ef1]        # 40d8 <__TMC_END__>
    11e7:           48 8d 35 ea 2e 00 00        lea    rsi,[rip+0x2eea]        # 40d8 <__TMC_END__>
    11ee:           48 29 fe                    sub    rsi,rdi
    11f1:           48 89 f0                    mov    rax,rsi
    11f4:           48 c1 ee 3f                 shr    rsi,0x3f
    11f8:           48 c1 f8 03                 sar    rax,0x3
    11fc:           48 01 c6                    add    rsi,rax
    11ff:           48 d1 fe                    sar    rsi,1
    1202:       /-- 74 14                       je     1218 <register_tm_clones+0x38>
    1204:       |   48 8b 05 e5 2d 00 00        mov    rax,QWORD PTR [rip+0x2de5]        # 3ff0 <_ITM_registerTMCloneTable>
    120b:       |   48 85 c0                    test   rax,rax
    120e:       +-- 74 08                       je     1218 <register_tm_clones+0x38>
    1210:       |   ff e0                       jmp    rax
    1212:       |   66 0f 1f 44 00 00           nop    WORD PTR [rax+rax*1+0x0]
    1218:       \-> c3                          ret    
    1219:           0f 1f 80 00 00 00 00        nop    DWORD PTR [rax+0x0]

0000000000001220 <__do_global_dtors_aux>:
    1220:              80 3d 11 31 00 00 00     cmp    BYTE PTR [rip+0x3111],0x0        # 4338 <completed.0>
    1227:       /----- 75 2f                    jne    1258 <__do_global_dtors_aux+0x38>
    1229:       |      55                       push   rbp
    122a:       |      48 83 3d 9e 2d 00 00     cmp    QWORD PTR [rip+0x2d9e],0x0        # 3fd0 <__cxa_finalize@GLIBC_2.2.5>
    1231:       |      00 
    1232:       |      48 89 e5                 mov    rbp,rsp
    1235:       |  /-- 74 0c                    je     1243 <__do_global_dtors_aux+0x23>
    1237:       |  |   48 8b 3d 82 2e 00 00     mov    rdi,QWORD PTR [rip+0x2e82]        # 40c0 <__dso_handle>
    123e:       |  |   e8 2d ff ff ff           call   1170 <__cxa_finalize@plt>
    1243:       |  \-> e8 68 ff ff ff           call   11b0 <deregister_tm_clones>
    1248:       |      c6 05 e9 30 00 00 01     mov    BYTE PTR [rip+0x30e9],0x1        # 4338 <completed.0>
    124f:       |      5d                       pop    rbp
    1250:       |      c3                       ret    
    1251:       |      0f 1f 80 00 00 00 00     nop    DWORD PTR [rax+0x0]
    1258:       \----> c3                       ret    
    1259:              0f 1f 80 00 00 00 00     nop    DWORD PTR [rax+0x0]

0000000000001260 <frame_dummy>:
    1260:       e9 7b ff ff ff          jmp    11e0 <register_tm_clones>

0000000000001265 <_Z14multi_functionPv>:
};




void *multi_function(void *arg) { //dummy function setup for pthread
    1265:       55                      push   rbp
    1266:       48 89 e5                mov    rbp,rsp
    1269:       48 89 7d f8             mov    QWORD PTR [rbp-0x8],rdi
    //code
};
    126d:       90                      nop
    126e:       5d                      pop    rbp
    126f:       c3                      ret    

0000000000001270 <_Z11my_functionv>:

void my_function() { //dummy function
    1270:       55                      push   rbp
    1271:       48 89 e5                mov    rbp,rsp
        //code
};
    1274:       90                      nop
    1275:       5d                      pop    rbp
    1276:       c3                      ret    

0000000000001277 <_Z19Function_Parametersii>:

void Function_Parameters(int y, int h){ //dummy function
    1277:       55                      push   rbp
    1278:       48 89 e5                mov    rbp,rsp
    127b:       89 7d fc                mov    DWORD PTR [rbp-0x4],edi
    127e:       89 75 f8                mov    DWORD PTR [rbp-0x8],esi
    //code
};
    1281:       90                      nop
    1282:       5d                      pop    rbp
    1283:       c3                      ret    

0000000000001284 <main>:




int main (int argc, char **argv) //main function, this is absolutly nessecary
{ // argc and argv allow comandline options to be passed
    1284:                          55                           push   rbp
    1285:                          48 89 e5                     mov    rbp,rsp
    1288:                          41 55                        push   r13
    128a:                          41 54                        push   r12
    128c:                          53                           push   rbx
    128d:                          48 81 ec 78 01 00 00         sub    rsp,0x178
    1294:                          89 bd 7c fe ff ff            mov    DWORD PTR [rbp-0x184],edi
    129a:                          48 89 b5 70 fe ff ff         mov    QWORD PTR [rbp-0x190],rsi

//creating an object
name_of_class name_of_object;
    12a1:                          48 8d 45 80                  lea    rax,[rbp-0x80]
    12a5:                          48 89 c7                     mov    rdi,rax
    12a8:                          e8 b3 07 00 00               call   1a60 <_ZN13name_of_classC1Ev>

//calling a method
name_of_object.member_function;

//calling functions
my_function();
    12ad:                          e8 be ff ff ff               call   1270 <_Z11my_functionv>

//calling a function with parameters
Function_Parameters(1,2);
    12b2:                          be 02 00 00 00               mov    esi,0x2
    12b7:                          bf 01 00 00 00               mov    edi,0x1
    12bc:                          e8 b6 ff ff ff               call   1277 <_Z19Function_Parametersii>

//calling member functions
name_of_class::member_function();
    12c1:                          e8 87 07 00 00               call   1a4d <_ZN13name_of_class15member_functionEv>
//calling int main(); can cause a memory leak!


//varaibles and data types
//dont use letters like me
int x = 50; //interger
    12c6:                          c7 85 7c ff ff ff 32         mov    DWORD PTR [rbp-0x84],0x32
    12cd:                          00 00 00 
double q = 4.6; //float
    12d0:                          f2 0f 10 05 70 0e 00         movsd  xmm0,QWORD PTR [rip+0xe70]        # 2148 <_ZStL6ignore+0x137>
    12d7:                          00 
    12d8:                          f2 0f 11 45 c8               movsd  QWORD PTR [rbp-0x38],xmm0
float b = 1.1; //float
    12dd:                          f3 0f 10 05 6b 0e 00         movss  xmm0,DWORD PTR [rip+0xe6b]        # 2150 <_ZStL6ignore+0x13f>
    12e4:                          00 
    12e5:                          f3 0f 11 45 c4               movss  DWORD PTR [rbp-0x3c],xmm0
bool sky_is_blue = true; //true or false
    12ea:                          c6 45 c3 01                  mov    BYTE PTR [rbp-0x3d],0x1
char d = 'F'; //character
    12ee:                          c6 45 c2 46                  mov    BYTE PTR [rbp-0x3e],0x46
std::string intro = "hello world"; //string
    12f2:                          48 8d 45 92                  lea    rax,[rbp-0x6e]
    12f6:                          48 89 c7                     mov    rdi,rax
    12f9:                          e8 62 fe ff ff               call   1160 <_ZNSaIcEC1Ev@plt>
    12fe:                          48 8d 55 92                  lea    rdx,[rbp-0x6e]
    1302:                          48 8d 85 50 ff ff ff         lea    rax,[rbp-0xb0]
    1309:                          48 8d 35 02 0d 00 00         lea    rsi,[rip+0xd02]        # 2012 <_ZStL6ignore+0x1>
    1310:                          48 89 c7                     mov    rdi,rax
    1313:                          e8 d8 fd ff ff               call   10f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>
    1318:                          48 8d 45 92                  lea    rax,[rbp-0x6e]
    131c:                          48 89 c7                     mov    rdi,rax
    131f:                          e8 ac fd ff ff               call   10d0 <_ZNSaIcED1Ev@plt>
std::string cars[4] = {"Volvo", "BMW", "Ford", "Mazda"}; //array
    1324:                          4c 8d a5 d0 fe ff ff         lea    r12,[rbp-0x130]
    132b:                          bb 03 00 00 00               mov    ebx,0x3
    1330:                          48 8d 45 93                  lea    rax,[rbp-0x6d]
    1334:                          48 89 c7                     mov    rdi,rax
    1337:                          e8 24 fe ff ff               call   1160 <_ZNSaIcEC1Ev@plt>
    133c:                          48 8d 45 93                  lea    rax,[rbp-0x6d]
    1340:                          48 89 c2                     mov    rdx,rax
    1343:                          48 8d 35 d4 0c 00 00         lea    rsi,[rip+0xcd4]        # 201e <_ZStL6ignore+0xd>
    134a:                          4c 89 e7                     mov    rdi,r12
    134d:                          e8 9e fd ff ff               call   10f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
    1352:                          48 8d 45 93                  lea    rax,[rbp-0x6d]
    1356:                          48 89 c7                     mov    rdi,rax
    1359:                          e8 72 fd ff ff               call   10d0 <_ZNSaIcED1Ev@plt>
    135e:                          4d 8d 6c 24 20               lea    r13,[r12+0x20]
    1363:                          48 83 eb 01                  sub    rbx,0x1
    1367:                          48 8d 45 94                  lea    rax,[rbp-0x6c]
    136b:                          48 89 c7                     mov    rdi,rax
    136e:                          e8 ed fd ff ff               call   1160 <_ZNSaIcEC1Ev@plt>
    1373:                          48 8d 45 94                  lea    rax,[rbp-0x6c]
    1377:                          48 89 c2                     mov    rdx,rax
    137a:                          48 8d 35 a3 0c 00 00         lea    rsi,[rip+0xca3]        # 2024 <_ZStL6ignore+0x13>
    1381:                          4c 89 ef                     mov    rdi,r13
    1384:                          e8 67 fd ff ff               call   10f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>
    1389:                          48 8d 45 94                  lea    rax,[rbp-0x6c]
    138d:                          48 89 c7                     mov    rdi,rax
    1390:                          e8 3b fd ff ff               call   10d0 <_ZNSaIcED1Ev@plt>
    1395:                          49 83 c5 20                  add    r13,0x20
    1399:                          48 83 eb 01                  sub    rbx,0x1
    139d:                          48 8d 45 95                  lea    rax,[rbp-0x6b]
    13a1:                          48 89 c7                     mov    rdi,rax
    13a4:                          e8 b7 fd ff ff               call   1160 <_ZNSaIcEC1Ev@plt>
    13a9:                          48 8d 45 95                  lea    rax,[rbp-0x6b]
    13ad:                          48 89 c2                     mov    rdx,rax
    13b0:                          48 8d 35 71 0c 00 00         lea    rsi,[rip+0xc71]        # 2028 <_ZStL6ignore+0x17>
    13b7:                          4c 89 ef                     mov    rdi,r13
    13ba:                          e8 31 fd ff ff               call   10f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>
    13bf:                          48 8d 45 95                  lea    rax,[rbp-0x6b]
    13c3:                          48 89 c7                     mov    rdi,rax
    13c6:                          e8 05 fd ff ff               call   10d0 <_ZNSaIcED1Ev@plt>
    13cb:                          49 83 c5 20                  add    r13,0x20
    13cf:                          48 83 eb 01                  sub    rbx,0x1
    13d3:                          48 8d 45 96                  lea    rax,[rbp-0x6a]
    13d7:                          48 89 c7                     mov    rdi,rax
    13da:                          e8 81 fd ff ff               call   1160 <_ZNSaIcEC1Ev@plt>
    13df:                          48 8d 45 96                  lea    rax,[rbp-0x6a]
    13e3:                          48 89 c2                     mov    rdx,rax
    13e6:                          48 8d 35 40 0c 00 00         lea    rsi,[rip+0xc40]        # 202d <_ZStL6ignore+0x1c>
    13ed:                          4c 89 ef                     mov    rdi,r13
    13f0:                          e8 fb fc ff ff               call   10f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>
    13f5:                          48 8d 45 96                  lea    rax,[rbp-0x6a]
    13f9:                          48 89 c7                     mov    rdi,rax
    13fc:                          e8 cf fc ff ff               call   10d0 <_ZNSaIcED1Ev@plt>
auto n = 36;
    1401:                          c7 45 bc 24 00 00 00         mov    DWORD PTR [rbp-0x44],0x24
volatile int y; //
const int v = 100; //constant
    1408:                          c7 45 b8 64 00 00 00         mov    DWORD PTR [rbp-0x48],0x64
unsigned int o; //cant be negative
signed r;
long i;

//increment operator
++x; //not the same
    140f:                          8b 85 7c ff ff ff            mov    eax,DWORD PTR [rbp-0x84]
    1415:                          83 c0 01                     add    eax,0x1
    1418:                          89 85 7c ff ff ff            mov    DWORD PTR [rbp-0x84],eax
x++;
    141e:                          8b 85 7c ff ff ff            mov    eax,DWORD PTR [rbp-0x84]
    1424:                          83 c0 01                     add    eax,0x1
    1427:                          89 85 7c ff ff ff            mov    DWORD PTR [rbp-0x84],eax
//deincrement operator
--x;
    142d:                          8b 85 7c ff ff ff            mov    eax,DWORD PTR [rbp-0x84]
    1433:                          83 e8 01                     sub    eax,0x1
    1436:                          89 85 7c ff ff ff            mov    DWORD PTR [rbp-0x84],eax
x--;
    143c:                          8b 85 7c ff ff ff            mov    eax,DWORD PTR [rbp-0x84]
    1442:                          83 e8 01                     sub    eax,0x1
    1445:                          89 85 7c ff ff ff            mov    DWORD PTR [rbp-0x84],eax

//sizeoff operator
x = sizeof (char); //returns the size in bytes 
    144b:                          c7 85 7c ff ff ff 01         mov    DWORD PTR [rbp-0x84],0x1
    1452:                          00 00 00 
!false;  // evaluates to true 

volatile int g; //stop compiler optimization

//logical NOT Operator
!g;
    1455:                          8b 85 c8 fe ff ff            mov    eax,DWORD PTR [rbp-0x138]

//bitwise NOT Operator
~g;
    145b:                          8b 85 c8 fe ff ff            mov    eax,DWORD PTR [rbp-0x138]

//bitwise shift Operator
g >> 1;
    1461:                          8b 85 c8 fe ff ff            mov    eax,DWORD PTR [rbp-0x138]
g << 1;
    1467:                          8b 85 c8 fe ff ff            mov    eax,DWORD PTR [rbp-0x138]

//bitwise AND Operator
g & 10;
    146d:                          8b 85 c8 fe ff ff            mov    eax,DWORD PTR [rbp-0x138]

//bitwise XOR Operator
g ^ 10;
    1473:                          8b 85 c8 fe ff ff            mov    eax,DWORD PTR [rbp-0x138]

//bitwise OR Operator
g | 10;
    1479:                          8b 85 c8 fe ff ff            mov    eax,DWORD PTR [rbp-0x138]
//(6 >= 6)     evaluates to true
//(5 < 5)      evaluates to false 


//print stuff
std::cout << "Hello world\n";
    147f:                          48 8d 35 ad 0b 00 00         lea    rsi,[rip+0xbad]        # 2033 <_ZStL6ignore+0x22>
    1486:                          48 8d 3d 73 2c 00 00         lea    rdi,[rip+0x2c73]        # 4100 <_ZSt4cout@@GLIBCXX_3.4>
    148d:                          e8 2e fc ff ff               call   10c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
printf ("Hello world\n");
    1492:                          48 8d 3d a7 0b 00 00         lea    rdi,[rip+0xba7]        # 2040 <_ZStL6ignore+0x2f>
    1499:                          e8 72 fc ff ff               call   1110 <puts@plt>
// "\n" makes a new line


//printing varables
printf ("%d", x); //%d is for an integer but %f would be for float or %s would be for a string
    149e:                          8b 85 7c ff ff ff            mov    eax,DWORD PTR [rbp-0x84]
    14a4:                          89 c6                        mov    esi,eax
    14a6:                          48 8d 3d 9f 0b 00 00         lea    rdi,[rip+0xb9f]        # 204c <_ZStL6ignore+0x3b>
    14ad:                          b8 00 00 00 00               mov    eax,0x0
    14b2:                          e8 79 fb ff ff               call   1030 <printf@plt>
std::cout << x; // a simpler way
    14b7:                          8b 85 7c ff ff ff            mov    eax,DWORD PTR [rbp-0x84]
    14bd:                          89 c6                        mov    esi,eax
    14bf:                          48 8d 3d 3a 2c 00 00         lea    rdi,[rip+0x2c3a]        # 4100 <_ZSt4cout@@GLIBCXX_3.4>
    14c6:                          e8 75 fc ff ff               call   1140 <_ZNSolsEi@plt>


//starting a new line
std::cout << "\n";
    14cb:                          48 8d 35 7d 0b 00 00         lea    rsi,[rip+0xb7d]        # 204f <_ZStL6ignore+0x3e>
    14d2:                          48 8d 3d 27 2c 00 00         lea    rdi,[rip+0x2c27]        # 4100 <_ZSt4cout@@GLIBCXX_3.4>
    14d9:                          e8 e2 fb ff ff               call   10c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>


//input
std::cout << "input any text: ";
    14de:                          48 8d 35 6c 0b 00 00         lea    rsi,[rip+0xb6c]        # 2051 <_ZStL6ignore+0x40>
    14e5:                          48 8d 3d 14 2c 00 00         lea    rdi,[rip+0x2c14]        # 4100 <_ZSt4cout@@GLIBCXX_3.4>
    14ec:                          e8 cf fb ff ff               call   10c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
scanf ("%d", &x); //both take the input of x 
    14f1:                          48 8d 85 7c ff ff ff         lea    rax,[rbp-0x84]
    14f8:                          48 89 c6                     mov    rsi,rax
    14fb:                          48 8d 3d 4a 0b 00 00         lea    rdi,[rip+0xb4a]        # 204c <_ZStL6ignore+0x3b>
    1502:                          b8 00 00 00 00               mov    eax,0x0
    1507:                          e8 d4 fb ff ff               call   10e0 <__isoc99_scanf@plt>
std::cin >> x;
    150c:                          48 8d 85 7c ff ff ff         lea    rax,[rbp-0x84]
    1513:                          48 89 c6                     mov    rsi,rax
    1516:                          48 8d 3d 03 2d 00 00         lea    rdi,[rip+0x2d03]        # 4220 <_ZSt3cin@@GLIBCXX_3.4>
    151d:                          e8 5e fb ff ff               call   1080 <_ZNSirsERi@plt>


//conditionals

if (g == 10)
    1522:                          8b 85 c8 fe ff ff            mov    eax,DWORD PTR [rbp-0x138]
    1528:                          83 f8 0a                     cmp    eax,0xa
    152b:                          0f 94 c0                     sete   al
    152e:                          84 c0                        test   al,al
    1530:                      /-- 75 09                        jne    153b <main+0x2b7>
{
        //do stuff
}
else if (g == 20)
    1532:                      |   8b 85 c8 fe ff ff            mov    eax,DWORD PTR [rbp-0x138]
    1538:                      |   83 f8 14                     cmp    eax,0x14
        //more stuff
}


//extremely powerful
switch(x) {
    153b:                      \-> 8b 85 7c ff ff ff            mov    eax,DWORD PTR [rbp-0x84]
    1541:                          83 f8 40                     cmp    eax,0x40
    1544:          /-------------- 74 69                        je     15af <main+0x32b>
    1546:          |               83 f8 40                     cmp    eax,0x40
    1549:       /--|-------------- 7f 76                        jg     15c1 <main+0x33d>
    154b:       |  |               83 f8 2d                     cmp    eax,0x2d
    154e:       |  |  /----------- 74 4e                        je     159e <main+0x31a>
    1550:       |  |  |            83 f8 2d                     cmp    eax,0x2d
    1553:       +--|--|----------- 7f 6c                        jg     15c1 <main+0x33d>
    1555:       |  |  |            83 f8 23                     cmp    eax,0x23
    1558:       |  |  |  /-------- 74 33                        je     158d <main+0x309>
    155a:       |  |  |  |         83 f8 23                     cmp    eax,0x23
    155d:       +--|--|--|-------- 7f 62                        jg     15c1 <main+0x33d>
    155f:       |  |  |  |         83 f8 0f                     cmp    eax,0xf
    1562:       |  |  |  |     /-- 74 07                        je     156b <main+0x2e7>
    1564:       |  |  |  |     |   83 f8 14                     cmp    eax,0x14
    1567:       |  |  |  |  /--|-- 74 13                        je     157c <main+0x2f8>
    1569:       +--|--|--|--|--|-- eb 56                        jmp    15c1 <main+0x33d>
        case 15:
                printf ("the value of x is 15");
    156b:       |  |  |  |  |  \-> 48 8d 3d f0 0a 00 00         lea    rdi,[rip+0xaf0]        # 2062 <_ZStL6ignore+0x51>
    1572:       |  |  |  |  |      b8 00 00 00 00               mov    eax,0x0
    1577:       |  |  |  |  |      e8 b4 fa ff ff               call   1030 <printf@plt>
        case 20:
                printf ("the value of x is 20");
    157c:       |  |  |  |  \----> 48 8d 3d f4 0a 00 00         lea    rdi,[rip+0xaf4]        # 2077 <_ZStL6ignore+0x66>
    1583:       |  |  |  |         b8 00 00 00 00               mov    eax,0x0
    1588:       |  |  |  |         e8 a3 fa ff ff               call   1030 <printf@plt>
        case 35:
                printf ("the value of x is 35");
    158d:       |  |  |  \-------> 48 8d 3d f8 0a 00 00         lea    rdi,[rip+0xaf8]        # 208c <_ZStL6ignore+0x7b>
    1594:       |  |  |            b8 00 00 00 00               mov    eax,0x0
    1599:       |  |  |            e8 92 fa ff ff               call   1030 <printf@plt>
        case 45:
                printf ("the value of x is 45");
    159e:       |  |  \----------> 48 8d 3d fc 0a 00 00         lea    rdi,[rip+0xafc]        # 20a1 <_ZStL6ignore+0x90>
    15a5:       |  |               b8 00 00 00 00               mov    eax,0x0
    15aa:       |  |               e8 81 fa ff ff               call   1030 <printf@plt>
        case 64:
                printf ("the value of x is 64");
    15af:       |  \-------------> 48 8d 3d 00 0b 00 00         lea    rdi,[rip+0xb00]        # 20b6 <_ZStL6ignore+0xa5>
    15b6:       |                  b8 00 00 00 00               mov    eax,0x0
    15bb:       |                  e8 70 fa ff ff               call   1030 <printf@plt>

    //break out of somthing
    break;
    15c0:       |                  90                           nop
//Conditional ternary operator
7==5+2 ? 4 : 3;


//Conditional loops
int j = 0;
    15c1:       \----------------> c7 45 dc 00 00 00 00         mov    DWORD PTR [rbp-0x24],0x0
//while loop
while (j<50){ //repeat until condition is met
    15c8:                   /----> 83 7d dc 31                  cmp    DWORD PTR [rbp-0x24],0x31
    15cc:                   |  /-- 7f 06                        jg     15d4 <main+0x350>
        //code
j++;
    15ce:                   |  |   83 45 dc 01                  add    DWORD PTR [rbp-0x24],0x1
while (j<50){ //repeat until condition is met
    15d2:                   \--|-- eb f4                        jmp    15c8 <main+0x344>
}


//for loop
for (int i = 0; i < 5; i++) {
    15d4:                      \-> c7 45 d8 00 00 00 00         mov    DWORD PTR [rbp-0x28],0x0
    15db:                   /----> 83 7d d8 04                  cmp    DWORD PTR [rbp-0x28],0x4
    15df:                   |  /-- 7f 26                        jg     1607 <main+0x383>
        std::cout << i << "\n";
    15e1:                   |  |   8b 45 d8                     mov    eax,DWORD PTR [rbp-0x28]
    15e4:                   |  |   89 c6                        mov    esi,eax
    15e6:                   |  |   48 8d 3d 13 2b 00 00         lea    rdi,[rip+0x2b13]        # 4100 <_ZSt4cout@@GLIBCXX_3.4>
    15ed:                   |  |   e8 4e fb ff ff               call   1140 <_ZNSolsEi@plt>
    15f2:                   |  |   48 8d 35 56 0a 00 00         lea    rsi,[rip+0xa56]        # 204f <_ZStL6ignore+0x3e>
    15f9:                   |  |   48 89 c7                     mov    rdi,rax
    15fc:                   |  |   e8 bf fa ff ff               call   10c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
for (int i = 0; i < 5; i++) {
    1601:                   |  |   83 45 d8 01                  add    DWORD PTR [rbp-0x28],0x1
    1605:                   \--|-- eb d4                        jmp    15db <main+0x357>
}


//do while loop
int z = 0;
    1607:                      \-> c7 45 d4 00 00 00 00         mov    DWORD PTR [rbp-0x2c],0x0
do {
  cout << z << "\n";
    160e:                   /----> 8b 45 d4                     mov    eax,DWORD PTR [rbp-0x2c]
    1611:                   |      89 c6                        mov    esi,eax
    1613:                   |      48 8d 3d e6 2a 00 00         lea    rdi,[rip+0x2ae6]        # 4100 <_ZSt4cout@@GLIBCXX_3.4>
    161a:                   |      e8 21 fb ff ff               call   1140 <_ZNSolsEi@plt>
    161f:                   |      48 8d 35 29 0a 00 00         lea    rsi,[rip+0xa29]        # 204f <_ZStL6ignore+0x3e>
    1626:                   |      48 89 c7                     mov    rdi,rax
    1629:                   |      e8 92 fa ff ff               call   10c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  z++;
    162e:                   |      83 45 d4 01                  add    DWORD PTR [rbp-0x2c],0x1
}
while (z < 5);
    1632:                   |      83 7d d4 04                  cmp    DWORD PTR [rbp-0x2c],0x4
    1636:                   |  /-- 7f 02                        jg     163a <main+0x3b6>
do {
    1638:                   \--|-- eb d4                        jmp    160e <main+0x38a>


//continue
for (int m = 0; m < 10; m++) {
    163a:                      \-> c7 45 d0 00 00 00 00         mov    DWORD PTR [rbp-0x30],0x0
    1641:             /----------> 83 7d d0 09                  cmp    DWORD PTR [rbp-0x30],0x9
    1645:             |  /-------- 7f 2f                        jg     1676 <main+0x3f2>
  if (m == 4) {
    1647:             |  |         83 7d d0 04                  cmp    DWORD PTR [rbp-0x30],0x4
    164b:             |  |  /----- 74 22                        je     166f <main+0x3eb>
    continue; //skips if m equials 4
  }
  cout << m << "\n";
    164d:             |  |  |      8b 45 d0                     mov    eax,DWORD PTR [rbp-0x30]
    1650:             |  |  |      89 c6                        mov    esi,eax
    1652:             |  |  |      48 8d 3d a7 2a 00 00         lea    rdi,[rip+0x2aa7]        # 4100 <_ZSt4cout@@GLIBCXX_3.4>
    1659:             |  |  |      e8 e2 fa ff ff               call   1140 <_ZNSolsEi@plt>
    165e:             |  |  |      48 8d 35 ea 09 00 00         lea    rsi,[rip+0x9ea]        # 204f <_ZStL6ignore+0x3e>
    1665:             |  |  |      48 89 c7                     mov    rdi,rax
    1668:             |  |  |      e8 53 fa ff ff               call   10c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    166d:             |  |  |  /-- eb 01                        jmp    1670 <main+0x3ec>
    continue; //skips if m equials 4
    166f:             |  |  \--|-> 90                           nop
for (int m = 0; m < 10; m++) {
    1670:             |  |     \-> 83 45 d0 01                  add    DWORD PTR [rbp-0x30],0x1
    1674:             \--|-------- eb cb                        jmp    1641 <main+0x3bd>
}


//goto
goto label;
    1676:                \-------> 90                           nop



//address operator
//"&" is put before a varabale or funtion to get the memeory address, example:
printf ("%d", &x); //this prints the memory address of x, like: 0x401720
    1677:                          48 8d 85 7c ff ff ff         lea    rax,[rbp-0x84]
    167e:                          48 89 c6                     mov    rsi,rax
    1681:                          48 8d 3d c4 09 00 00         lea    rdi,[rip+0x9c4]        # 204c <_ZStL6ignore+0x3b>
    1688:                          b8 00 00 00 00               mov    eax,0x0
    168d:                          e8 9e f9 ff ff               call   1030 <printf@plt>


//pointers
int* p = &x; //the p varable now holds the memory address of p
    1692:                          48 8d 85 7c ff ff ff         lea    rax,[rbp-0x84]
    1699:                          48 89 45 b0                  mov    QWORD PTR [rbp-0x50],rax
std::cout << p; //prints the memory address of p
    169d:                          48 8b 45 b0                  mov    rax,QWORD PTR [rbp-0x50]
    16a1:                          48 89 c6                     mov    rsi,rax
    16a4:                          48 8d 3d 55 2a 00 00         lea    rdi,[rip+0x2a55]        # 4100 <_ZSt4cout@@GLIBCXX_3.4>
    16ab:                          e8 f0 f9 ff ff               call   10a0 <_ZNSolsEPKv@plt>
//void pointer

void* void_pointer;

//NULL pointer
int* null_pointer = NULL;
    16b0:                          48 c7 45 a8 00 00 00         mov    QWORD PTR [rbp-0x58],0x0
    16b7:                          00 

//references
std::string food = "Pizza";  // food variable
    16b8:                          48 8d 45 97                  lea    rax,[rbp-0x69]
    16bc:                          48 89 c7                     mov    rdi,rax
    16bf:                          e8 9c fa ff ff               call   1160 <_ZNSaIcEC1Ev@plt>
    16c4:                          48 8d 55 97                  lea    rdx,[rbp-0x69]
    16c8:                          48 8d 85 a0 fe ff ff         lea    rax,[rbp-0x160]
    16cf:                          48 8d 35 f5 09 00 00         lea    rsi,[rip+0x9f5]        # 20cb <_ZStL6ignore+0xba>
    16d6:                          48 89 c7                     mov    rdi,rax
    16d9:                          e8 12 fa ff ff               call   10f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>
    16de:                          48 8d 45 97                  lea    rax,[rbp-0x69]
    16e2:                          48 89 c7                     mov    rdi,rax
    16e5:                          e8 e6 f9 ff ff               call   10d0 <_ZNSaIcED1Ev@plt>
std::string &meal = food;    // reference to food
    16ea:                          48 8d 85 a0 fe ff ff         lea    rax,[rbp-0x160]
    16f1:                          48 89 45 a0                  mov    QWORD PTR [rbp-0x60],rax

//dereferencing pointers
std::cout << *p; //instead of printing the memory address of p, this prints the value of p (25)
    16f5:                          48 8b 45 b0                  mov    rax,QWORD PTR [rbp-0x50]
    16f9:                          8b 00                        mov    eax,DWORD PTR [rax]
    16fb:                          89 c6                        mov    esi,eax
    16fd:                          48 8d 3d fc 29 00 00         lea    rdi,[rip+0x29fc]        # 4100 <_ZSt4cout@@GLIBCXX_3.4>
    1704:                          e8 37 fa ff ff               call   1140 <_ZNSolsEi@plt>


std::cout << "\n";
    1709:                          48 8d 35 3f 09 00 00         lea    rsi,[rip+0x93f]        # 204f <_ZStL6ignore+0x3e>
    1710:                          48 8d 3d e9 29 00 00         lea    rdi,[rip+0x29e9]        # 4100 <_ZSt4cout@@GLIBCXX_3.4>
    1717:                          e8 a4 f9 ff ff               call   10c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>


//exceptions

try { // Block of code to try
  int age = 15;
    171c:                          c7 45 9c 0f 00 00 00         mov    DWORD PTR [rbp-0x64],0xf
  if (age >= 18) {
    1723:                          83 7d 9c 11                  cmp    DWORD PTR [rbp-0x64],0x11
    1727:                      /-- 7e 15                        jle    173e <main+0x4ba>
    std::cout << "Access granted - you are old enough.\n";
    1729:                      |   48 8d 35 a8 09 00 00         lea    rsi,[rip+0x9a8]        # 20d8 <_ZStL6ignore+0xc7>
    1730:                      |   48 8d 3d c9 29 00 00         lea    rdi,[rip+0x29c9]        # 4100 <_ZSt4cout@@GLIBCXX_3.4>
    1737:                      |   e8 84 f9 ff ff               call   10c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    173c:       /--------------|-- eb 24                        jmp    1762 <main+0x4de>
  } else {
    throw 505; // Throw an exception when a problem arise
    173e:       |              \-> bf 04 00 00 00               mov    edi,0x4
    1743:       |                  e8 08 f9 ff ff               call   1050 <__cxa_allocate_exception@plt>
    1748:       |                  c7 00 f9 01 00 00            mov    DWORD PTR [rax],0x1f9
    174e:       |                  ba 00 00 00 00               mov    edx,0x0
    1753:       |                  48 8d 35 46 26 00 00         lea    rsi,[rip+0x2646]        # 3da0 <_ZTIi@@CXXABI_1.3>
    175a:       |                  48 89 c7                     mov    rdi,rax
    175d:       |                  e8 ce f9 ff ff               call   1130 <__cxa_throw@plt>

//multi-threading in C

pthread_t t1, t2, t3, t4; //Create 4 threads

pthread_create(&t1, NULL, multi_function, NULL); //starting threads
    1762:       >----------------> 48 8d 85 98 fe ff ff         lea    rax,[rbp-0x168]
    1769:       |                  b9 00 00 00 00               mov    ecx,0x0
    176e:       |                  48 8d 15 f0 fa ff ff         lea    rdx,[rip+0xfffffffffffffaf0]        # 1265 <_Z14multi_functionPv>
    1775:       |                  be 00 00 00 00               mov    esi,0x0
    177a:       |                  48 89 c7                     mov    rdi,rax
    177d:       |                  e8 ee f8 ff ff               call   1070 <pthread_create@plt>
pthread_create(&t2, NULL, multi_function, NULL);
    1782:       |                  48 8d 85 90 fe ff ff         lea    rax,[rbp-0x170]
    1789:       |                  b9 00 00 00 00               mov    ecx,0x0
    178e:       |                  48 8d 15 d0 fa ff ff         lea    rdx,[rip+0xfffffffffffffad0]        # 1265 <_Z14multi_functionPv>
    1795:       |                  be 00 00 00 00               mov    esi,0x0
    179a:       |                  48 89 c7                     mov    rdi,rax
    179d:       |                  e8 ce f8 ff ff               call   1070 <pthread_create@plt>
pthread_create(&t3, NULL, multi_function, NULL);
    17a2:       |                  48 8d 85 88 fe ff ff         lea    rax,[rbp-0x178]
    17a9:       |                  b9 00 00 00 00               mov    ecx,0x0
    17ae:       |                  48 8d 15 b0 fa ff ff         lea    rdx,[rip+0xfffffffffffffab0]        # 1265 <_Z14multi_functionPv>
    17b5:       |                  be 00 00 00 00               mov    esi,0x0
    17ba:       |                  48 89 c7                     mov    rdi,rax
    17bd:       |                  e8 ae f8 ff ff               call   1070 <pthread_create@plt>
pthread_create(&t4, NULL, multi_function, NULL);
    17c2:       |                  48 8d 85 80 fe ff ff         lea    rax,[rbp-0x180]
    17c9:       |                  b9 00 00 00 00               mov    ecx,0x0
    17ce:       |                  48 8d 15 90 fa ff ff         lea    rdx,[rip+0xfffffffffffffa90]        # 1265 <_Z14multi_functionPv>
    17d5:       |                  be 00 00 00 00               mov    esi,0x0
    17da:       |                  48 89 c7                     mov    rdi,rax
    17dd:       |                  e8 8e f8 ff ff               call   1070 <pthread_create@plt>

pthread_join(t1, NULL); //Closing the threads back to main thread
    17e2:       |                  48 8b 85 98 fe ff ff         mov    rax,QWORD PTR [rbp-0x168]
    17e9:       |                  be 00 00 00 00               mov    esi,0x0
    17ee:       |                  48 89 c7                     mov    rdi,rax
    17f1:       |                  e8 6a f8 ff ff               call   1060 <pthread_join@plt>
pthread_join(t2, NULL);
    17f6:       |                  48 8b 85 90 fe ff ff         mov    rax,QWORD PTR [rbp-0x170]
    17fd:       |                  be 00 00 00 00               mov    esi,0x0
    1802:       |                  48 89 c7                     mov    rdi,rax
    1805:       |                  e8 56 f8 ff ff               call   1060 <pthread_join@plt>
pthread_join(t3, NULL);
    180a:       |                  48 8b 85 88 fe ff ff         mov    rax,QWORD PTR [rbp-0x178]
    1811:       |                  be 00 00 00 00               mov    esi,0x0
    1816:       |                  48 89 c7                     mov    rdi,rax
    1819:       |                  e8 42 f8 ff ff               call   1060 <pthread_join@plt>
pthread_join(t4, NULL);
    181e:       |                  48 8b 85 80 fe ff ff         mov    rax,QWORD PTR [rbp-0x180]
    1825:       |                  be 00 00 00 00               mov    esi,0x0
    182a:       |                  48 89 c7                     mov    rdi,rax
    182d:       |                  e8 2e f8 ff ff               call   1060 <pthread_join@plt>
//core1.join(); //Closing the threads back to main thread
//core2.join();
//core3.join();
//core4.join(); //doesnt have to be core, it can be whatever you want to call it

return 0; //important because int main has a integer return type
    1832:       |                  41 bc 00 00 00 00            mov    r12d,0x0
std::string food = "Pizza";  // food variable
    1838:       |                  48 8d 85 a0 fe ff ff         lea    rax,[rbp-0x160]
    183f:       |                  48 89 c7                     mov    rdi,rax
    1842:       |                  e8 49 f8 ff ff               call   1090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
std::string cars[4] = {"Volvo", "BMW", "Ford", "Mazda"}; //array
    1847:       |                  48 8d 9d d0 fe ff ff         lea    rbx,[rbp-0x130]
    184e:       |                  48 83 eb 80                  sub    rbx,0xffffffffffffff80
    1852:       |           /----> 48 8d 85 d0 fe ff ff         lea    rax,[rbp-0x130]
    1859:       |           |      48 39 c3                     cmp    rbx,rax
    185c:       |           |  /-- 74 0e                        je     186c <main+0x5e8>
    185e:       |           |  |   48 83 eb 20                  sub    rbx,0x20
    1862:       |           |  |   48 89 df                     mov    rdi,rbx
    1865:       |           |  |   e8 26 f8 ff ff               call   1090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    186a:       |           \--|-- eb e6                        jmp    1852 <main+0x5ce>
std::string intro = "hello world"; //string
    186c:       |              \-> 48 8d 85 50 ff ff ff         lea    rax,[rbp-0xb0]
    1873:       |                  48 89 c7                     mov    rdi,rax
    1876:       |                  e8 15 f8 ff ff               call   1090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    187b:       |                  44 89 e0                     mov    eax,r12d
    187e:       |  /-------------- e9 5e 01 00 00               jmp    19e1 <main+0x75d>
    1883:       |  |               48 89 c3                     mov    rbx,rax
    1886:       |  |               48 8d 45 92                  lea    rax,[rbp-0x6e]
    188a:       |  |               48 89 c7                     mov    rdi,rax
    188d:       |  |               e8 3e f8 ff ff               call   10d0 <_ZNSaIcED1Ev@plt>
    1892:       |  |               48 89 d8                     mov    rax,rbx
    1895:       |  |               48 89 c7                     mov    rdi,rax
    1898:       |  |               e8 b3 f8 ff ff               call   1150 <_Unwind_Resume@plt>
    189d:       |  |               49 89 c5                     mov    r13,rax
    18a0:       |  |               48 8d 45 93                  lea    rax,[rbp-0x6d]
    18a4:       |  |               48 89 c7                     mov    rdi,rax
    18a7:       |  |               e8 24 f8 ff ff               call   10d0 <_ZNSaIcED1Ev@plt>
    18ac:       |  |           /-- eb 31                        jmp    18df <main+0x65b>
    18ae:       |  |           |   49 89 c5                     mov    r13,rax
    18b1:       |  |           |   48 8d 45 94                  lea    rax,[rbp-0x6c]
    18b5:       |  |           |   48 89 c7                     mov    rdi,rax
    18b8:       |  |           |   e8 13 f8 ff ff               call   10d0 <_ZNSaIcED1Ev@plt>
    18bd:       |  |           +-- eb 20                        jmp    18df <main+0x65b>
    18bf:       |  |           |   49 89 c5                     mov    r13,rax
    18c2:       |  |           |   48 8d 45 95                  lea    rax,[rbp-0x6b]
    18c6:       |  |           |   48 89 c7                     mov    rdi,rax
    18c9:       |  |           |   e8 02 f8 ff ff               call   10d0 <_ZNSaIcED1Ev@plt>
    18ce:       |  |           +-- eb 0f                        jmp    18df <main+0x65b>
    18d0:       |  |           |   49 89 c5                     mov    r13,rax
    18d3:       |  |           |   48 8d 45 96                  lea    rax,[rbp-0x6a]
    18d7:       |  |           |   48 89 c7                     mov    rdi,rax
    18da:       |  |           |   e8 f1 f7 ff ff               call   10d0 <_ZNSaIcED1Ev@plt>
    18df:       |  |           \-> 4d 85 e4                     test   r12,r12
    18e2:       |  |        /----- 74 23                        je     1907 <main+0x683>
std::string cars[4] = {"Volvo", "BMW", "Ford", "Mazda"}; //array
    18e4:       |  |        |      b8 03 00 00 00               mov    eax,0x3
    18e9:       |  |        |      48 29 d8                     sub    rax,rbx
    18ec:       |  |        |      48 c1 e0 05                  shl    rax,0x5
    18f0:       |  |        |      49 8d 1c 04                  lea    rbx,[r12+rax*1]
    18f4:       |  |        |  /-> 4c 39 e3                     cmp    rbx,r12
    18f7:       |  |        +--|-- 74 0e                        je     1907 <main+0x683>
    18f9:       |  |        |  |   48 83 eb 20                  sub    rbx,0x20
    18fd:       |  |        |  |   48 89 df                     mov    rdi,rbx
    1900:       |  |        |  |   e8 8b f7 ff ff               call   1090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    1905:       |  |        |  \-- eb ed                        jmp    18f4 <main+0x670>
    1907:       |  |        \----> 4c 89 eb                     mov    rbx,r13
    190a:       |  |  /----------- e9 b8 00 00 00               jmp    19c7 <main+0x743>
    190f:       |  |  |            48 89 c3                     mov    rbx,rax
    1912:       |  |  |            48 8d 45 97                  lea    rax,[rbp-0x69]
    1916:       |  |  |            48 89 c7                     mov    rdi,rax
    1919:       |  |  |            e8 b2 f7 ff ff               call   10d0 <_ZNSaIcED1Ev@plt>
    191e:       |  |  |            49 89 dc                     mov    r12,rbx
    1921:       |  |  |  /-------- eb 7c                        jmp    199f <main+0x71b>
catch (int myNum) { // Block of code to handle errors 
    1923:       |  |  |  |         48 83 fa 01                  cmp    rdx,0x1
    1927:       |  |  |  |     /-- 74 05                        je     192e <main+0x6aa>
    1929:       |  |  |  |     |   48 89 c3                     mov    rbx,rax
    192c:       |  |  |  |  /--|-- eb 5a                        jmp    1988 <main+0x704>
    192e:       |  |  |  |  |  \-> 48 89 c7                     mov    rdi,rax
    1931:       |  |  |  |  |      e8 0a f7 ff ff               call   1040 <__cxa_begin_catch@plt>
    1936:       |  |  |  |  |      8b 00                        mov    eax,DWORD PTR [rax]
    1938:       |  |  |  |  |      89 45 98                     mov    DWORD PTR [rbp-0x68],eax
  std::cout << "Access denied - You must be at least 18 years old.\n";
    193b:       |  |  |  |  |      48 8d 35 be 07 00 00         lea    rsi,[rip+0x7be]        # 2100 <_ZStL6ignore+0xef>
    1942:       |  |  |  |  |      48 8d 3d b7 27 00 00         lea    rdi,[rip+0x27b7]        # 4100 <_ZSt4cout@@GLIBCXX_3.4>
    1949:       |  |  |  |  |      e8 72 f7 ff ff               call   10c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
  std::cout << "Error number: " << myNum;
    194e:       |  |  |  |  |      48 8d 35 df 07 00 00         lea    rsi,[rip+0x7df]        # 2134 <_ZStL6ignore+0x123>
    1955:       |  |  |  |  |      48 8d 3d a4 27 00 00         lea    rdi,[rip+0x27a4]        # 4100 <_ZSt4cout@@GLIBCXX_3.4>
    195c:       |  |  |  |  |      e8 5f f7 ff ff               call   10c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
    1961:       |  |  |  |  |      48 89 c2                     mov    rdx,rax
    1964:       |  |  |  |  |      8b 45 98                     mov    eax,DWORD PTR [rbp-0x68]
    1967:       |  |  |  |  |      89 c6                        mov    esi,eax
    1969:       |  |  |  |  |      48 89 d7                     mov    rdi,rdx
    196c:       |  |  |  |  |      e8 cf f7 ff ff               call   1140 <_ZNSolsEi@plt>
catch (int myNum) { // Block of code to handle errors 
    1971:       |  |  |  |  |      e8 aa f7 ff ff               call   1120 <__cxa_end_catch@plt>
    1976:       \--|--|--|--|----- e9 e7 fd ff ff               jmp    1762 <main+0x4de>
    197b:          |  |  |  |      48 89 c3                     mov    rbx,rax
    197e:          |  |  |  |      e8 9d f7 ff ff               call   1120 <__cxa_end_catch@plt>
    1983:          |  |  |  +----- eb 03                        jmp    1988 <main+0x704>
std::string food = "Pizza";  // food variable
    1985:          |  |  |  |      48 89 c3                     mov    rbx,rax
    1988:          |  |  |  \----> 48 8d 85 a0 fe ff ff         lea    rax,[rbp-0x160]
    198f:          |  |  |         48 89 c7                     mov    rdi,rax
    1992:          |  |  |         e8 f9 f6 ff ff               call   1090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    1997:          |  |  |         49 89 dc                     mov    r12,rbx
    199a:          |  |  +-------- eb 03                        jmp    199f <main+0x71b>
std::string cars[4] = {"Volvo", "BMW", "Ford", "Mazda"}; //array
    199c:          |  |  |         49 89 c4                     mov    r12,rax
    199f:          |  |  \-------> 48 8d 9d d0 fe ff ff         lea    rbx,[rbp-0x130]
    19a6:          |  |            48 83 eb 80                  sub    rbx,0xffffffffffffff80
    19aa:          |  |     /----> 48 8d 85 d0 fe ff ff         lea    rax,[rbp-0x130]
    19b1:          |  |     |      48 39 c3                     cmp    rbx,rax
    19b4:          |  |     |  /-- 74 0e                        je     19c4 <main+0x740>
    19b6:          |  |     |  |   48 83 eb 20                  sub    rbx,0x20
    19ba:          |  |     |  |   48 89 df                     mov    rdi,rbx
    19bd:          |  |     |  |   e8 ce f6 ff ff               call   1090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    19c2:          |  |     \--|-- eb e6                        jmp    19aa <main+0x726>
    19c4:          |  |        \-> 4c 89 e3                     mov    rbx,r12
std::string intro = "hello world"; //string
    19c7:          |  \----------> 48 8d 85 50 ff ff ff         lea    rax,[rbp-0xb0]
    19ce:          |               48 89 c7                     mov    rdi,rax
    19d1:          |               e8 ba f6 ff ff               call   1090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>
    19d6:          |               48 89 d8                     mov    rax,rbx
    19d9:          |               48 89 c7                     mov    rdi,rax
    19dc:          |               e8 6f f7 ff ff               call   1150 <_Unwind_Resume@plt>
    19e1:          \-------------> 48 81 c4 78 01 00 00         add    rsp,0x178
    19e8:                          5b                           pop    rbx
    19e9:                          41 5c                        pop    r12
    19eb:                          41 5d                        pop    r13
    19ed:                          5d                           pop    rbp
    19ee:                          c3                           ret    

00000000000019ef <_Z41__static_initialization_and_destruction_0ii>:
    19ef:           55                          push   rbp
    19f0:           48 89 e5                    mov    rbp,rsp
    19f3:           48 83 ec 10                 sub    rsp,0x10
    19f7:           89 7d fc                    mov    DWORD PTR [rbp-0x4],edi
    19fa:           89 75 f8                    mov    DWORD PTR [rbp-0x8],esi
    19fd:           83 7d fc 01                 cmp    DWORD PTR [rbp-0x4],0x1
    1a01:       /-- 75 32                       jne    1a35 <_Z41__static_initialization_and_destruction_0ii+0x46>
    1a03:       |   81 7d f8 ff ff 00 00        cmp    DWORD PTR [rbp-0x8],0xffff
    1a0a:       +-- 75 29                       jne    1a35 <_Z41__static_initialization_and_destruction_0ii+0x46>
  extern wostream wclog;        /// Linked to standard error (buffered)
#endif
  //@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
    1a0c:       |   48 8d 3d 26 29 00 00        lea    rdi,[rip+0x2926]        # 4339 <_ZStL8__ioinit>
    1a13:       |   e8 e8 f6 ff ff              call   1100 <_ZNSt8ios_base4InitC1Ev@plt>
    1a18:       |   48 8d 15 a1 26 00 00        lea    rdx,[rip+0x26a1]        # 40c0 <__dso_handle>
    1a1f:       |   48 8d 35 13 29 00 00        lea    rsi,[rip+0x2913]        # 4339 <_ZStL8__ioinit>
    1a26:       |   48 8b 05 cb 25 00 00        mov    rax,QWORD PTR [rip+0x25cb]        # 3ff8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    1a2d:       |   48 89 c7                    mov    rdi,rax
    1a30:       |   e8 7b f6 ff ff              call   10b0 <__cxa_atexit@plt>
    1a35:       \-> 90                          nop
    1a36:           c9                          leave  
    1a37:           c3                          ret    

0000000000001a38 <_GLOBAL__sub_I__Z14multi_functionPv>:
    1a38:       55                      push   rbp
    1a39:       48 89 e5                mov    rbp,rsp
    1a3c:       be ff ff 00 00          mov    esi,0xffff
    1a41:       bf 01 00 00 00          mov    edi,0x1
    1a46:       e8 a4 ff ff ff          call   19ef <_Z41__static_initialization_and_destruction_0ii>
    1a4b:       5d                      pop    rbp
    1a4c:       c3                      ret    

0000000000001a4d <_ZN13name_of_class15member_functionEv>:
static void member_function() { //static member function
    1a4d:       55                      push   rbp
    1a4e:       48 89 e5                mov    rbp,rsp
};
    1a51:       90                      nop
    1a52:       5d                      pop    rbp
    1a53:       c3                      ret    

0000000000001a54 <_ZN13name_of_class12my_function2Ev>:
virtual void my_function2() {
    1a54:       55                      push   rbp
    1a55:       48 89 e5                mov    rbp,rsp
    1a58:       48 89 7d f8             mov    QWORD PTR [rbp-0x8],rdi
};
    1a5c:       90                      nop
    1a5d:       5d                      pop    rbp
    1a5e:       c3                      ret    
    1a5f:       90                      nop

0000000000001a60 <_ZN13name_of_classC1Ev>:
class name_of_class {
    1a60:       55                      push   rbp
    1a61:       48 89 e5                mov    rbp,rsp
    1a64:       48 89 7d f8             mov    QWORD PTR [rbp-0x8],rdi
    1a68:       48 8d 15 21 23 00 00    lea    rdx,[rip+0x2321]        # 3d90 <_ZTV13name_of_class+0x10>
    1a6f:       48 8b 45 f8             mov    rax,QWORD PTR [rbp-0x8]
    1a73:       48 89 10                mov    QWORD PTR [rax],rdx
    1a76:       48 8b 45 f8             mov    rax,QWORD PTR [rbp-0x8]
    1a7a:       c7 40 0c 0a 00 00 00    mov    DWORD PTR [rax+0xc],0xa
    1a81:       90                      nop
    1a82:       5d                      pop    rbp
    1a83:       c3                      ret    
    1a84:       66 2e 0f 1f 84 00 00    nop    WORD PTR cs:[rax+rax*1+0x0]
    1a8b:       00 00 00 
    1a8e:       66 90                   xchg   ax,ax

0000000000001a90 <__libc_csu_init>:
    1a90:              41 57                    push   r15
    1a92:              4c 8d 3d cf 22 00 00     lea    r15,[rip+0x22cf]        # 3d68 <__frame_dummy_init_array_entry>
    1a99:              41 56                    push   r14
    1a9b:              49 89 d6                 mov    r14,rdx
    1a9e:              41 55                    push   r13
    1aa0:              49 89 f5                 mov    r13,rsi
    1aa3:              41 54                    push   r12
    1aa5:              41 89 fc                 mov    r12d,edi
    1aa8:              55                       push   rbp
    1aa9:              48 8d 2d c8 22 00 00     lea    rbp,[rip+0x22c8]        # 3d78 <__do_global_dtors_aux_fini_array_entry>
    1ab0:              53                       push   rbx
    1ab1:              4c 29 fd                 sub    rbp,r15
    1ab4:              48 83 ec 08              sub    rsp,0x8
    1ab8:              e8 43 f5 ff ff           call   1000 <_init>
    1abd:              48 c1 fd 03              sar    rbp,0x3
    1ac1:       /----- 74 1b                    je     1ade <__libc_csu_init+0x4e>
    1ac3:       |      31 db                    xor    ebx,ebx
    1ac5:       |      0f 1f 00                 nop    DWORD PTR [rax]
    1ac8:       |  /-> 4c 89 f2                 mov    rdx,r14
    1acb:       |  |   4c 89 ee                 mov    rsi,r13
    1ace:       |  |   44 89 e7                 mov    edi,r12d
    1ad1:       |  |   41 ff 14 df              call   QWORD PTR [r15+rbx*8]
    1ad5:       |  |   48 83 c3 01              add    rbx,0x1
    1ad9:       |  |   48 39 dd                 cmp    rbp,rbx
    1adc:       |  \-- 75 ea                    jne    1ac8 <__libc_csu_init+0x38>
    1ade:       \----> 48 83 c4 08              add    rsp,0x8
    1ae2:              5b                       pop    rbx
    1ae3:              5d                       pop    rbp
    1ae4:              41 5c                    pop    r12
    1ae6:              41 5d                    pop    r13
    1ae8:              41 5e                    pop    r14
    1aea:              41 5f                    pop    r15
    1aec:              c3                       ret    
    1aed:              0f 1f 00                 nop    DWORD PTR [rax]

0000000000001af0 <__libc_csu_fini>:
    1af0:       c3                      ret    

Disassembly of section .fini:

0000000000001af4 <_fini>:
    1af4:       48 83 ec 08             sub    rsp,0x8
    1af8:       48 83 c4 08             add    rsp,0x8
    1afc:       c3     
